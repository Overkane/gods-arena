package HowlOfTerror
import Abilities
import AbilityTooltipGenerator
import BuffIds
import ClosureEvents
import DemonLordIds
import GameConstants
import TooltipFactory
import CustomHeal
import DamageEvent
import CreepAggro
import ClosureForGroups
import AbilityDefinitionExtension

constant AOE = 500.
constant RealLevelClosure DAMAGE_DECREASE = lvl -> 0.2 + 0.1 * (lvl-1)
constant RealLevelClosure DURATION = lvl -> 10
constant RealLevelClosure HP_RECOVERY = lvl -> 0.01 + 0.01 * lvl

unit howlUser

init
  EventListener.onCast(HOWL_OF_TERROR_ID) (unit caster) ->
    if howlUser == null
      howlUser = caster

    if caster.hasAbility(HOWL_OF_TERROR_ID)
      let lvl = caster.getAbilityLevel(HOWL_OF_TERROR_ID)

      forUnitsInRange(caster.getPos(), AOE) (unit u) ->
        if u.isEnemyOf(caster.getOwner()) and u.isAlive()
          u.clearAggro()
          caster.addAggro(u, 300. * lvl)

  DamageEvent.addListener() ->
    let tunit = DamageEvent.getTarget()

    if tunit.getHP() <= DamageEvent.getAmount() // Seems there is no buffs on died units so need to check death preemptively
      and tunit.hasAbility(BuffIds.howlofTerror)

      let lvl = howlUser.getAbilityLevel(HOWL_OF_TERROR_ID)
      let hpToRestore = HP_RECOVERY.run(lvl) * howlUser.getMaxHP()
      howlUser.healTarget(howlUser, hpToRestore)
      flashEffect(Abilities.deathCoilMissile, howlUser.getPos())

@compiletime function genAbility()
  let tooltip = new AbilityTooltipGenerator(
    Targettype.NONE,
    "Lets loose a terrifying howl that causes nearby enemy units to shiver in fear. "
    + "Feared units have reduced attack damage. "
    + "If a feared unit is killed, the Demon Lord recovers part of his HP.\n"
    + "Also {0} enemies in AOE.".format("taunts".color(TAUNT_COLOR))
  )
  new AbilityDefinitionPitLordHowlofTerror(HOWL_OF_TERROR_ID)
  ..registerTooltipGenerator(tooltip)
  ..makeWAbility()
  ..presetIcon(Icons.bTNHowlOfTerror)

  ..tooltipStartListen()
  ..setLevels(NORMAL_SPELL_LEVELS)
  ..setName("Howl of Terror")
  ..addTooltipProperty("Damage Decrease", lvl -> (DAMAGE_DECREASE.run(lvl) * 100).percRound())
  ..addTooltipProperty("HP Recovered", lvl -> (HP_RECOVERY.run(lvl) * 100).percRound())
  ..presetAreaofEffect(lvl -> AOE)
  ..addTooltipProperty("Duration", DURATION)
  ..presetManaCost(lvl -> 65 + 20 * (lvl-1))
  ..presetCooldown(lvl -> 20)
  ..tooltipStopListen()

  ..presetDamageIncrease(DAMAGE_DECREASE)
  ..presetDurationNormal(DURATION)
  ..presetDurationHero(DURATION)
