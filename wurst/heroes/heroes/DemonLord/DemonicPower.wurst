package DemonicPower
import AbilityTooltipGenerator
import GameConstants
import DemonLordIds
import PassiveAbilityPreset
import AbilityDefinitionExtension
import ClosureEvents
import ClosureTimers
import DemonicPowerBuff
import Buff

init
  EventListener.add(EVENT_PLAYER_HERO_SKILL) ->
    let u = EventData.getTriggerUnit()

    if EventData.getLearnedSkill() == DEMONIC_POWER_ID
      let lvl = u.getAbilityLevel(DEMONIC_POWER_ID)
      let bonusStr = DEMONIC_POWER_STR_BONUS.run(lvl)

      if not u.hasBuff(DemonicPowerMainBuff.typeId)
        new DemonicPowerMainBuff(bonusStr).apply(u)
      else
        u.removeBuffById(DemonicPowerMainBuff.typeId)

        // After buff main buff is destroyed we are waiting for minor buff to expire to be sure onEnd()
        // it have used old buff values.
        doAfter(BUFF_ANIM_PERIOD) ->
          new DemonicPowerMainBuff(bonusStr).apply(u)

  EventListener.add(EVENT_PLAYER_HERO_REVIVE_FINISH) ->
    let u = EventData.getTriggerUnit()

    if u.hasAbility(DEMONIC_POWER_ID)
      let lvl = u.getAbilityLevel(DEMONIC_POWER_ID)
      let bonusStr = DEMONIC_POWER_STR_BONUS.run(lvl)

      new DemonicPowerMainBuff(bonusStr).apply(u)

@compiletime function genAbility()
  let tooltip = new AbilityTooltipGenerator(Targettype.PASSIVE, "Increases strength for each enemy nearby. Bosses gives more strength.")
  new PassiveAbilityPreset(DEMONIC_POWER_ID, NORMAL_SPELL_LEVELS, tooltip)
  ..makeEAbility()
  ..presetIcon(Icons.pASBTNCleavingAttack)

  ..tooltipStartListen()
  ..setName("Demonic Power")
  ..addTooltipProperty("Bonus Strength per Enemy", lvl -> DEMONIC_POWER_STR_BONUS.run(lvl).round())
  ..addTooltipProperty("Boss Strength Multiplier", lvl -> DEMONIC_POWER_STR_BOSS_MULT)
  ..presetAreaofEffect(lvl -> DEMONIC_POWER_AOE)
  ..tooltipStopListen()
