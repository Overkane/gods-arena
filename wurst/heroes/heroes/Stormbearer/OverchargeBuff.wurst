package OverchargeBuff
import PresetBuffs
import Assets
import SoundUtils
import CustomStatSystem
import TooltipFactory

constant buffTuple1 = compiletime(createDummyBuffObject("Overcharge Buff".color(POSITIVE_COLOR), "Hero deals increased magic damage",  Icons.bTNControlMagic))
constant buffTuple2 = compiletime(createDummyBuffObject("Overcharge Debuff", "Hero deals decreased magic damage and slowed",  Icons.bTNControlMagic))


public class OverchargeBuff extends NormalBuff
  constant ON_APPLY_SOUND = new SoundDefinition(Sounds.purgeTarget1)
  constant bonusSP = 0.
  constant duration = 0.

  construct(real dur, real bonusSP)
    super(dur, buffTuple1)
    this.bonusSP = bonusSP
    this.duration = dur
    
  override function onApply()
    target.addStat(CustomUnitStats.SPELL_POWER, bonusSP)
    ON_APPLY_SOUND.playForPlayer(target.getOwner())

  override function onEnd()
    target.addStat(CustomUnitStats.SPELL_POWER, -bonusSP)
    new OverchargeDebuff(duration, bonusSP).apply(target)


class OverchargeDebuff extends NormalBuff
  constant ON_APPLY_SOUND = new SoundDefinition(Sounds.slowTarget1)
  constant ON_END_SOUND = new SoundDefinition(Sounds.sorceressCastAttack1)
  constant bonusSP = 0.

  construct(real dur, real bonusSP)
    super(dur, buffTuple2)
    this.bonusSP = bonusSP

  override function onApply()
    target.addStat(CustomUnitStats.SPELL_POWER, -bonusSP)
    ON_APPLY_SOUND.playForPlayer(target.getOwner())

  override function onEnd()
    target.addStat(CustomUnitStats.SPELL_POWER, bonusSP)
    ON_END_SOUND.playForPlayer(target.getOwner())
