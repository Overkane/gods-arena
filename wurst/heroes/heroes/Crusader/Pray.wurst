package Pray
import AbilityTooltipGenerator
import ClosureEvents
import Buff
import DialogBox
import PlayerData
import PrayBuff
import HashMap
import GameConstants
import AbilityDefinitionExtension
import Wave
import TooltipFactory

public constant PRAY_ID = compiletime(ABIL_ID_GEN.next())

constant RealLevelClosure BONUS_DAMAGE = lvl -> 4. * lvl
constant RealLevelClosure BONUS_AS = lvl -> 3. * lvl
constant RealLevelClosure BONUS_ARMOR = lvl -> 1. * lvl
constant RealLevelClosure BONUS_HP_REG = lvl -> 1. * lvl
constant RealLevelClosure BONUS_STATS = lvl -> 1. * lvl
public constant PRAY_AOE = 900.

DialogBox prayDialog
unit prayCaster

public enum PrayBuffTypes
  DAMAGE
  ARMOR
  ATTACK_SPEED
  HP_REG
  STATS

public constant prayBuffMap = new IterableMap<PrayBuffTypes, real>
..put(PrayBuffTypes.DAMAGE, 0)
..put(PrayBuffTypes.ARMOR, 0)
..put(PrayBuffTypes.ATTACK_SPEED, 0)
..put(PrayBuffTypes.HP_REG, 0)
..put(PrayBuffTypes.STATS, 0)

init 
  nullTimer() -> 
    prayDialog = new DialogBox("Choose God to Pray")
    
    prayDialog.addButton("God of Fire (+{0} Damage * ability level)".format(BONUS_DAMAGE.run(1).round().toString())) -> 
      updateBuff(PrayBuffTypes.DAMAGE)
      prayCaster.disableAbility(PRAY_ID, true, false)
    
    prayDialog.addButton("God of Wind (+{0} Attack Speed * ability level)".format(BONUS_AS.run(1).round().toString())) ->
      updateBuff(PrayBuffTypes.ATTACK_SPEED)
      prayCaster.disableAbility(PRAY_ID, true, false)
      
    prayDialog.addButton("God of Earth (+{0} Armor * ability level)".format(BONUS_ARMOR.run(1).round().toString())) ->
      updateBuff(PrayBuffTypes.ARMOR)
      prayCaster.disableAbility(PRAY_ID, true, false)

    prayDialog.addButton("God of Nature (+{0} hp reg * ability level)".format(BONUS_HP_REG.run(1).round().toString())) -> 
      updateBuff(PrayBuffTypes.HP_REG)
      prayCaster.disableAbility(PRAY_ID, true, false)

    prayDialog.addButton("God of Water (+{0} All Stats * ability level)".format(BONUS_STATS.run(1).round().toString())) -> 
      updateBuff(PrayBuffTypes.STATS)
      prayCaster.disableAbility(PRAY_ID, true, false)

  EventListener.onCast(PRAY_ID) (unit caster) ->
    if prayCaster == null
      prayCaster = caster
    prayDialog.display(caster.getOwner(), true)

  OnWaveFinish.add() (Wave wave) ->
    if Wave.waveNumber % 2 == 0
      prayCaster.disableAbility(PRAY_ID, false, false)

function updateBuff(PrayBuffTypes prayBuffType)
  let p = GetTriggerPlayer()
  pData.get(p).getHero().ifPresent() (h) ->
    if h.actor.hasBuff(PrayMainBuff.typeId)
      h.actor.removeBuffById(PrayMainBuff.typeId)
    
    // After buff main buff is destroyed we are waiting for minor buff to expire to be sure onEnd()
    // it have used old buff values.
    doAfter(BUFF_ANIM_PERIOD) ->
      let lvl = h.actor.getAbilityLevel(PRAY_ID)

      switch prayBuffType
        case PrayBuffTypes.DAMAGE
          prayBuffMap.put(prayBuffType, prayBuffMap.get(prayBuffType) + BONUS_DAMAGE.run(lvl))  
        case PrayBuffTypes.ATTACK_SPEED
          prayBuffMap.put(prayBuffType, prayBuffMap.get(prayBuffType) + BONUS_AS.run(lvl))  
        case PrayBuffTypes.ARMOR
          prayBuffMap.put(prayBuffType, prayBuffMap.get(prayBuffType) + BONUS_ARMOR.run(lvl))  
        case PrayBuffTypes.HP_REG
          prayBuffMap.put(prayBuffType, prayBuffMap.get(prayBuffType) + BONUS_HP_REG.run(lvl))  
        case PrayBuffTypes.STATS
          prayBuffMap.put(prayBuffType, prayBuffMap.get(prayBuffType) + BONUS_STATS.run(lvl))  
      
      new PrayMainBuff().apply(h.actor)

@compiletime function genAbility()
  let tooltip = new AbilityTooltipGenerator("Hero prays to the forgotten Gods and gain a portion of their power, " +
    "strengthen himself and his allies. Each pray makes the buff stronger. {0}.".format(
      "Can be used only once per two waves".color(IMPORTANT_COLOR)))
  new ChannelAbilityPreset(PRAY_ID, INNATE_SPELL_LEVELS, true, tooltip)
  ..makeDAbility()
  ..presetIcon(Icons.bTNResurrection)

  ..tooltipStartListen()
  ..presetTargetTypes(Targettype.NONE)
  ..setName("Pray")
  ..presetAreaofEffect(lvl -> PRAY_AOE)
  ..tooltipStopListen()

  ..presetManaCost(lvl -> 0)
