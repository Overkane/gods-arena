package PrayBuff
import PresetBuffs
import Assets
import ClosureForGroups
import BonusHandler
import CustomStatSystem
import HashMap
import initlater Pray

public constant buffTuple = compiletime(createDummyBuffObject("Pray", "Various stats are improved",  Icons.bTNResurrection))

constant prayMap = new HashMap<trigger, PrayMainBuff>
function trigger.getPrayBuff() returns PrayMainBuff
  return prayMap.get(this)

function trigger.setPrayBuff(PrayMainBuff buffInstance) 
  prayMap.put(this, buffInstance)

public class PrayMainBuff extends NormalBuff
  effect buffEffect
  constant affected = CreateGroup()
  constant inRangeTrig = CreateTrigger()..setPrayBuff(this)

  construct()
    super(99999, buffTuple)

  function onInRange(unit u)
    affected.add(u)
    new PrayMinorBuff(99999)..apply(u)

  override function onApply()
    buffEffect = target.addEffect(Abilities.devotionAura, AttachmentPoints.origin)
    inRangeTrig..registerUnitInRange(target, PRAY_AOE, null)
    ..addAction(() -> GetTriggeringTrigger().getPrayBuff().onInRange(GetTriggerUnit()))

    forUnitsInRange(target.getPos(), PRAY_AOE) (unit u) ->
      if u.isAlive() and u.isAllyOf(target) and not affected.has(u)
        onInRange(u)
  
  override function onEnd()
    buffEffect.destr()
    affected..clear()..destr()
    prayMap.remove(inRangeTrig)
    inRangeTrig.destr()

    for u in affected
      u.removeBuffById(PrayMinorBuff.typeId)
    
    affected.destr()

  override function update()
    super.update()

    for u in affected
      if u.getPos().distanceToSq(target.getPos()) > PRAY_AOE.squared()
        u.removeBuffById(PrayMinorBuff.typeId)
        affected.remove(u)


public class PrayMinorBuff extends NormalBuff

  construct(real dur)
    super(dur, buffTuple)
    
  override function onApply()
    updateBuff(true)

  override function onEnd()
    updateBuff(false)

  function updateBuff(bool onApply)
    let multiplier = onApply ? 1 : -1

    for prayBuffType in prayBuffMap
      switch prayBuffType
        case PrayBuffTypes.DAMAGE
          target.addStat(CustomUnitStats.EVASION, prayBuffMap.get(prayBuffType) * multiplier)
        case PrayBuffTypes.ATTACK_SPEED
          target.addStat(CustomUnitStats.SPELL_LIFESTEAL, prayBuffMap.get(prayBuffType) * multiplier)
        case PrayBuffTypes.ARMOR
          target.addStat(CustomUnitStats.SPELL_POWER, prayBuffMap.get(prayBuffType) * multiplier)
        case PrayBuffTypes.HP_REG
          target.addStat(CustomUnitStats.ATTACK_POWER, prayBuffMap.get(prayBuffType) * multiplier)
        case PrayBuffTypes.STATS
          target.addBonus(Bonus.STRENGTH, prayBuffMap.get(prayBuffType) * multiplier)
          target.addBonus(Bonus.AGILITY, prayBuffMap.get(prayBuffType) * multiplier)
          target.addBonus(Bonus.INTELLIGENCE, prayBuffMap.get(prayBuffType) * multiplier)
