package PrayBuff
import PresetBuffs
import Assets
import ClosureForGroups
import BonusHandler
import initlater Pray

public constant buffTuple = compiletime(createDummyBuffObject("Pray", "Various stats are improved",  Icons.bTNResurrection))

public class PrayMainBuff extends NormalBuff
  effect buffEffect

  construct()
    super(99999, buffTuple)

  override function onApply()
    buffEffect = target.addEffect(Abilities.devotionAura, AttachmentPoints.origin)
  
  override function onEnd()
    buffEffect.destr()

  override function update()
    super.update()
    forUnitsInRange(target.getPos(), PRAY_AOE) (unit u) ->
      if u.isAlive() and u.isAllyOf(target)
        new PrayMinorBuff(BUFF_ANIM_PERIOD).apply(u)

public class PrayMinorBuff extends NormalBuff

  construct(real dur)
    super(dur, buffTuple)
    
  override function onApply()
    updateBuff(true)

  override function onEnd()
    updateBuff(false)

  function updateBuff(bool onApply)
    let multiplier = onApply ? 1 : -1

    for prayBuffType in prayBuffMap
      switch prayBuffType
        case PrayBuffTypes.DAMAGE
          target.addBonus(Bonus.DAMAGE, prayBuffMap.get(prayBuffType) * multiplier)
        case PrayBuffTypes.ATTACK_SPEED
          target.addBonus(Bonus.ATTACKSPEED, prayBuffMap.get(prayBuffType) * multiplier) 
        case PrayBuffTypes.ARMOR
          target.addBonus(Bonus.ARMOR, prayBuffMap.get(prayBuffType) * multiplier)
        case PrayBuffTypes.HP_REG
          target.addBonus(Bonus.LIFEREGEN, prayBuffMap.get(prayBuffType) * multiplier)
        case PrayBuffTypes.STATS
          target.addBonus(Bonus.STRENGTH, prayBuffMap.get(prayBuffType) * multiplier)
          target.addBonus(Bonus.AGILITY, prayBuffMap.get(prayBuffType) * multiplier)
          target.addBonus(Bonus.INTELLIGENCE, prayBuffMap.get(prayBuffType) * multiplier)
