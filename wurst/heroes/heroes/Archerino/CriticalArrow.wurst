package CriticalArrow
import AbilityTooltipGenerator
import StandardTextTags
import Tagwalk
import Orders
import Buff
import GameConstants
import PassiveAbilityPreset
import DummyStatCaster
import TooltipFactory
import AbilityDefinitionExtension

public constant CRIT_ARROW_ID = compiletime(ABIL_ID_GEN.next())

constant ENTANGLE_ID = compiletime(ABIL_ID_GEN.next())
constant RealLevelClosure CHANCE = lvl -> 0.1 + 0.1 * lvl
constant RealLevelClosure ENTANGLE_DAMAGE = lvl -> 20. * lvl
constant RealLevelClosure ENTANGLE_DURATION = lvl -> 0.5 + 0.5 * lvl


init
    DamageEvent.addListener() -> 
        let attacker = DamageEvent.getSource()
        let lvl = attacker.getAbilityLevel(CRIT_ARROW_ID)
        let isTagged = DamageEvent.getTarget().hasBuff(TagBuff.typeId)
        if DamageEvent.getType() == DamageType.ATTACK and lvl > 0 and (isTagged or GetRandomReal(0, 1) < CHANCE.run(lvl))
            let damage = 50 + attacker.getAgi(true) * 1.6
            DamageEvent.addAmount(damage)
            createCriticalStrikeTextTag(attacker, damage.toInt())

            if isTagged
                attacker.triggerEntangleEffect(DamageEvent.getTarget(), lvl)

public function unit.triggerEntangleEffect(unit target, int lvl)
    new DummyStatCaster()
    ..caster(this)
    ..castTarget(ENTANGLE_ID, lvl, OrderIds.entanglingroots, target)

    target.removeBuffById(TagBuff.typeId)


@compiletime function genAbility()
    let tooltip = new AbilityTooltipGenerator(Targettype.PASSIVE, "Has a chance to deal extra damage.\nIf the target is |cffd803bctagged|r, it will always crit and also become entangled.")
    new PassiveAbilityPreset(CRIT_ARROW_ID, NORMAL_SPELL_LEVELS, tooltip)
    ..makeEAbility()
    ..presetIcon(Icons.pASBTNCriticalStrike)

    ..tooltipStartListen()
    ..addTooltipProperty("Extra Damage", lvl -> "50 + 1.6 * Agility")
    ..addTooltipProperty("Chance",  lvl -> (CHANCE.run(lvl) * 100).percRound())
    ..addTooltipProperty("Entangle Damage per sec",  lvl -> ENTANGLE_DAMAGE.run(lvl).toString(0))
    ..addTooltipProperty("Entangle Duration",  lvl -> ENTANGLE_DURATION.run(lvl).toString(1))
    ..setName("Critical Arrow")
    ..tooltipStopListen()

    new AbilityDefinitionEntanglingRootscreep(ENTANGLE_ID)
    ..setLevels(NORMAL_SPELL_LEVELS)
    ..setDummyAbility()
    ..presetDamageperSecond(ENTANGLE_DAMAGE)
    ..presetDurationNormal(ENTANGLE_DURATION)
    ..presetDurationHero(lvl -> getHeroStunDuration(ENTANGLE_DURATION.run(lvl)))
        