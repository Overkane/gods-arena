package BattleTranceBuff
import PresetBuffs
import Assets
import SoundUtils
import BonusHandler
import TooltipFactory

constant buffTuple1 = compiletime(createDummyBuffObject("Battle Trance".color(POSITIVE_COLOR), "Hero has increased attackspeed.",  Icons.bTNMirrorImage))
constant buffTuple2 = compiletime(createDummyBuffObject("Battle Trance Debuff", "Hero has decreased attackspeed.",  Icons.bTNMirrorImage))

public class BattleTranceBuff extends NormalBuff
  constant ON_APPLY_SOUND = new SoundDefinition(Sounds.bloodlustTarget)
  constant originalDuration = 0.
  constant baseAttackCooldownTime = 0.
  constant bonusAS = 0.
  constant bonusMS = 0.
  constant attackCooldownTime = 0.

  construct(real dur, real bonusAS, real bonusMS, real attackCooldownTime)
    super(dur, buffTuple1)

    originalDuration = dur

    this.baseAttackCooldownTime = target.getAttackCooldown(1)
    
    this.bonusAS = bonusAS
    this.bonusMS = bonusMS
    this.attackCooldownTime = attackCooldownTime
    this.duration = dur
    
  override function onApply()
    ON_APPLY_SOUND.play()
    target
    ..addBonus(Bonus.ATTACKSPEED, bonusAS)
    ..setMoveSpeed(target.getDefaultMovespeed() + bonusMS)
    ..setAttackCooldown(attackCooldownTime, 1)

  override function onEnd()
    target
    ..addBonus(Bonus.ATTACKSPEED, -bonusAS)
    ..setMoveSpeed(target.getDefaultMovespeed())
    ..setAttackCooldown(baseAttackCooldownTime, 1)

    new BattleTranceDebuff(originalDuration / 2, bonusAS, bonusMS).apply(target)

public class BattleTranceDebuff extends NormalBuff
  constant bonusAS = 0.
  constant bonusMS = 0.

  construct(real dur, real bonusAS, real bonusMS)
    super(dur, buffTuple2)
    this.bonusAS = bonusAS
    this.bonusMS = bonusMS

  override function onApply()
    target
    ..addBonus(Bonus.ATTACKSPEED, -bonusAS)
    ..setMoveSpeed(target.getDefaultMovespeed() - bonusMS)

  override function onEnd()
    target
    ..addBonus(Bonus.ATTACKSPEED, bonusAS)
    ..setMoveSpeed(target.getDefaultMovespeed())
