package SwiftSlash
import AbilityTooltipGenerator
import GameConstants
import ClosureEvents
import ClosureTimers
import TooltipFactory
import HashSet
import OrderIds
import ArmorCut
import UnitAnimations
import GeneralFunctions
import ClosureForGroups
import SoundUtils
import LinkedList
import MapModels
import AttachmentPoints
import DamageSystem
import AbilityDefinitionExtension

public constant SWIFT_SLASH_ID = compiletime(ABIL_ID_GEN.next())

constant RealLevelClosure RAW_DAMAGE = lvl -> 100. * lvl
constant RealLevelClosure AGI_DAMAGE = lvl -> 0.5 + 0.25 * lvl

constant HIT_SOUNDS = new LinkedList<SoundDefinition>
..add(new SoundDefinition(Sounds.metalMediumSliceFlesh1))
..add(new SoundDefinition(Sounds.metalMediumSliceFlesh2))
..add(new SoundDefinition(Sounds.metalMediumSliceFlesh3))


init
  EventListener.onPointCast(SWIFT_SLASH_ID) (unit caster, vec2 target) ->
    let lvl = caster.getAbilityLevel(SWIFT_SLASH_ID)  
    let rawDamage = RAW_DAMAGE.run(lvl) 
    let agiDamageMult = AGI_DAMAGE.run(lvl)
    
    let distance = caster.getPos().distanceTo(target)  
    var distanceTraveled = 0.
    let distancePerTick = 55.
    let damagedTargets = new HashSet<unit>

    caster
    ..setVertexColor(255, 255, 255, 180)
    ..pause()
    ..setAnimation(UnitAnimations.HeroBladeMaster.attack2.idx)
    ..queueAnimation("stand")
    ..setTimeScale(2.5)
    
    doAfter(0.2) -> 
      caster.setTimeScale(0)
      doPeriodically(0.03) (CallbackPeriodic cb) ->      
        let nextPointPos = caster.getPos().moveTowards(target, distancePerTick)
        distanceTraveled += distancePerTick

        if nextPointPos.isTerrainWalkable(true) and distanceTraveled <= distance
          forUnitsInRange(caster.getPos(), 225) (unit u) ->
            if not damagedTargets.has(u) and u.isAlive() and u.getOwner() == ENEMY_PLAYER
              damagedTargets.add(u)

              caster.dealPhysicalDamage(u, rawDamage + caster.getAgi(true) * agiDamageMult)
              flashEffect(MapModels.ephemeralCutRed, u, AttachmentPoints.chest)

              if caster.hasAbility(ARMOR_CUT_ID)
                let armorCutLvl = caster.getAbilityLevel(ARMOR_CUT_ID)
                let armorReduction = ARMOR_CUT_ARMOR_REDUCE.run(armorCutLvl)
                let duration = ARMOR_CUT_DURATION.run(armorCutLvl)
                new ArmorCutBuff(duration, armorReduction).apply(u)

          caster.setPos(nextPointPos)
        else
          caster
          ..unpause()
          ..setVertexColor(255, 255, 255, 255)
          ..setTimeScale(1)
          ..issueImmediateOrderById(OrderIds.stop)

          HIT_SOUNDS..shuffle().getFirst().playOnPoint(target.toVec3())
          
          destroy damagedTargets
          destroy cb


@compiletime function genAbility()
  let tooltip = new AbilityTooltipGenerator("Hero travels short distance attacking all enemies on the way. Affected enemies receive current level of {0} debuff."
  .format("Armor Cut".color(COLOR_GOLD)))
  new ChannelAbilityPreset(SWIFT_SLASH_ID, NORMAL_SPELL_LEVELS, true, tooltip)
  ..makeQAbility()
  ..presetIcon(Icons.bTNWindWalkOn)
  
  ..tooltipStartListen()
  ..addTooltipProperty("Damage Type", DamageTypeTooltips.physical)
  ..presetTargetTypes(Targettype.POINT)
  ..setLevels(NORMAL_SPELL_LEVELS)
  ..setName("Swift Slash")
  ..addTooltipProperty("Damage", lvl -> RAW_DAMAGE.run(lvl).round().toString())
  ..addTooltipProperty("Bonus Agility Damage", lvl -> (AGI_DAMAGE.run(lvl)*100).percRound())
  ..presetCastRange(lvl -> 650. + 50. * lvl)
  ..presetManaCost(lvl -> 60 + 15 * lvl)
  ..presetCooldown(lvl -> 12. - lvl)
  ..tooltipStopListen()
