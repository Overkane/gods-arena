package BattleTrance
import AbilityTooltipGenerator
import GameConstants
import BattleTranceBuff
import ClosureEvents
import AbilityDefinitionExtension

public constant BATTLE_TRANCE_ID = compiletime(ABIL_ID_GEN.next())

constant RealLevelClosure DURATION = lvl -> 12.
constant RealLevelClosure BONUS_AS = lvl -> 40. * lvl
constant RealLevelClosure BONUS_MS = lvl -> 30. * lvl
constant RealLevelClosure ATTACK_COOLDOWN_TIME = lvl -> 1.7 - 0.1 * lvl


init 
  EventListener.onCast(BATTLE_TRANCE_ID) (unit caster) ->
    let lvl = caster.getAbilityLevel(BATTLE_TRANCE_ID)
    let bonusAS = BONUS_AS.run(lvl)
    let bonusMS = BONUS_MS.run(lvl)
    let attackCooldownTime = ATTACK_COOLDOWN_TIME.run(lvl)
    let duration = DURATION.run(lvl)

    new BattleTranceBuff(duration, bonusAS, bonusMS, attackCooldownTime).apply(caster)
    
    
@compiletime function genAbility()
  let tooltip = new AbilityTooltipGenerator(Targettype.NONE, "After a delay gives bonus to attackspeed, movement speed and decreases base attack cooldown. " +
    "After buff ends hero gets reversed buff for a half of original buff duration.")
  new ChannelAbilityPreset(BATTLE_TRANCE_ID, ULTIMATE_SPELL_LEVELS, true, tooltip)
  ..makeRAbility()
  ..presetIcon(Icons.bTNMirrorImage)
  ..presetCastingTime(lvl -> 1)

  ..tooltipStartListen()
  ..setName("Battle Trance")
  ..addTooltipProperty("Bonus Attackspeed", BONUS_AS)
  ..addTooltipProperty("Bonus Movespeed", BONUS_MS)
  ..addTooltipProperty("Base Attack Cooldown", lvl -> ATTACK_COOLDOWN_TIME.run(lvl).toString(1))
  ..addTooltipProperty("Duration", DURATION)
  ..presetManaCost(lvl -> 55 + 55 * lvl)
  ..presetCooldown(lvl -> 60)
  ..tooltipStopListen()

  ..presetDurationNormal(DURATION)
  ..presetDurationHero(DURATION)


