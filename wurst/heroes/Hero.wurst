package Hero
import Entity
import HashMap
import CurrentArena
import HeroDefinitionPresets

public constant heroUnitMap = new IterableMap<unit, Hero>
public constant heroUnitList = new LinkedList<unit>

public class Hero extends UnitEntity
  construct(player p, int typId, vec3 pos, angle ang)
    super(createUnit(p, typId, pos.toVec2(), ang))
    heroUnitMap.put(this.actor, this)
    heroUnitList.add(this.actor)

    let innateAbilId = heroInnateSkills.loadInt(typId, typId)
    registerInnateAbilityUpgradeEvent(innateAbilId)

  function addXp(int toAdd, boolean showEyeCandy)
    AddHeroXP(this.actor, toAdd, showEyeCandy)

  override function setXY(vec3 tpos)
    pos = tpos
    if tpos.x > currentArenaRect.getMaxX() or tpos.x < currentArenaRect.getMinX()
      vel = vec3(-vel.x, vel.y, vel.z)
      pos += vel
    else if tpos.y > currentArenaRect.getMaxY() or tpos.y < currentArenaRect.getMinY()
      vel = vec3(vel.x, -vel.y, vel.z)
      pos += vel
      
    actor.setXYZReal(pos)

  ondestroy
    heroUnitMap.remove(this.actor)
    heroUnitList.remove(this.actor)

function registerInnateAbilityUpgradeEvent(int abilId)
  EventListener.add(EVENT_PLAYER_HERO_LEVEL) ->
    let u = EventData.getTriggerUnit()
    if u.hasAbility(abilId)
      if u.getLevel() == 10 or u.getLevel() == 18
        u.incAbilityLevel(abilId)
