package WaveRewards
import ClosureEvents
import GameConstants
import PlayerData
import HashMap
import Wave
import Boss
import SoundUtils

/* 
  Exp — is given for each creep, so heroes could level up during the wave.
  Gold — is given on the wave finish, so players couldn't use earned gold during the wave to buy items.
*/

var expPerUnit = 0

var expPull = 0
var goldPull = 0

public var expCompensationOnPlayerLeave = 0
public var goldCompensationOnPlayerLeave = 0

constant RECIEVE_GOLD = new SoundDefinition(Sounds.receiveGold)

var bossWave = false

init
  EventListener.add(EVENT_PLAYER_UNIT_DEATH) ->
    let u = EventData.getDyingUnit()
    var bossWaveCondition = true

    if bossWave
      bossWaveCondition = u.isBoss()
    
    if bossWaveCondition and u.getOwner() == ENEMY_PLAYER

      // TODO condition to fix messages with 0 exp cuz
      // Foes summons give exp from pull.
      if expPull != 0
        // That condition means that if exp for 2 units is bigger then overall pull,
        // which means that there is not enough exp for 2 units in pull,
        // then there is only 1 unit left with some exp leftovers from division
        if expPerUnit * 2 > expPull
          pData.forEach() (player p, PlayerData playerData) ->
            if playerData.getHero().have
              playerData.getHero().hero.addXp(expPull, true)
          expPull -= expPull
        else
          pData.forEach() (player p, PlayerData playerData) ->
            if playerData.getHero().have
              playerData.getHero().hero.addXp(expPerUnit, true)
          expPull -= expPerUnit
      
  
  onWaveStart() (Wave wave) ->
    let creepAmount = wave.creepAmount
    let waveExp = wave.expBounty
    let waveGold = wave.goldBounty

    bossWave = wave.isBossWave
    
    expPull = waveExp + (waveExp * (8-pData.size())/7).round()
    goldPull = waveGold + (waveGold * (8-pData.size())/7).round()

    expPerUnit = (expPull / creepAmount).toInt()

    // 1/7 of bonus gold and exp is held by player.
    // For exapmle 6 players get 2/7 bonus gold and exp based on original value.
    // 5 players will get 3/7 bonus gold and exp.
    // So if we want to compensate gold and exp on player leave,
    // we need to store compensation sums for both and compensate it on leave,
    // like if there was not that player from the beggining.
    goldCompensationOnPlayerLeave += (waveGold / 7).round()
    expCompensationOnPlayerLeave += (waveExp / 7).round()

  onWaveFinish() (Wave wave) ->
    // Setting a small delay for message to appear after "Wave cleared!" message.
    doAfter(2.5) -> 
      pData.forEach() (player p, PlayerData playerData) ->
        if wave.isBossWave
          playerData.addArenaPoints(500)
        else
          playerData.addArenaPoints(100)
        
        p
        ..addGold(goldPull)
        ..print("You have got " + goldPull.toString().color(COLOR_GOLD) + " gold for completing the wave.", 7.5)
      RECIEVE_GOLD.play()
