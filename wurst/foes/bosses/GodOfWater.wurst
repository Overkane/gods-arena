package GodOfWater
import GameConstants
import Boss
import AbilityTooltipGenerator
import ClosureTimers
import OrderIds
import DamageSystem
import ClosureForGroups
import Assets
import SoundUtils
import HomingProjectile
import Projectile
import HelmOfTheGod
import Hero
import DummyCaster
import GeneralFunctions
import MapModels
import Heightmap
import PresetBuffs
import Creep

constant GOD_OF_WATER_ID = compiletime(UNIT_ID_GEN.next())

constant SEA_ELEMENTAL_ID = compiletime(UNIT_ID_GEN.next())

constant WAVES_ID = compiletime(ABIL_ID_GEN.next())
constant WAVES_SOUND_ID = new SoundDefinition(Sounds.stampedeCaster1)

constant BOSS_MUSIC_THEME = new SoundDefinition(Sounds.doom)

constant ULT_PROJECTILE_SPAWN_SOUND = new SoundDefinition(Sounds.waterElementalMissile3)
constant ULT_PROJECTILE_IMPACT_SOUND = new SoundDefinition(Sounds.waterElementalMissile1)

constant ULT_ORB_POWERUP_SOUND = new SoundDefinition(Sounds.siphonMana)
constant ULT_ORB_POWERUP_SOUND_LOOP = new SoundDefinition(Sounds.siphonManaLoop, true)

constant ULT_RAINING_SOUND_LOOP = new SoundDefinition(Sounds.waterWavesLoop1, true)

public class GodOfWater extends Boss
  private constant castQueue = new LinkedList<int>

  private var isPhase1 = false
  private var wasOnPhase1 = false
  private var isPhase2 = false
  private var wasOnPhase2 = false

  construct(vec3 pos, angle ang)
    super(GOD_OF_WATER_ID, pos, ang)

    actor.addItemById(HELM_OF_THE_GOD_ITEM.getNewId())

    BOSS_MUSIC_THEME.play()
    new SoundDefinition(Sounds.nagaRoyalGuardReady1).play()

    spellCycle()

    EventListener.add(actor, EVENT_PLAYER_UNIT_DEATH) () ->
      forUnitsAll() (unit u) ->
        if u.getTypeId() == SEA_ELEMENTAL_ID
          u.kill()
      BOSS_MUSIC_THEME.play(0, 0)

    DamageEvent.addListener() ->
      let tunit = DamageEvent.getTarget()

      if tunit == actor 
        if tunit.getHPRatio() <= 0.7 and not wasOnPhase1
          isPhase1 = true
          wasOnPhase1 = true
        else if tunit.getHPRatio() <= 0.4 and not wasOnPhase2
          isPhase2 = true
          wasOnPhase2 = true

  function spellCycle()
    let spellCd = wasOnPhase2 ? 7. : 9.
    doAfter(spellCd) ->
      if actor.isAlive()
        if isPhase1
          isPhase1 = false
          castUltimateSpell()
        else if isPhase2
          isPhase2 = false
          castUltimateSpell()
        else
          if castQueue.isEmpty()
            for i = 0 to 2
              castQueue.add(i)
            castQueue.shuffle()
          actor.setAnimation("cast")
          let rand = castQueue.pop()
          switch rand
            case 0
              castWaves()
            case 1
              castSeaElementals()
            case 2
              castTorrent()
          spellCycle()
          
  function castTorrent()
    actor.pause()

    let torrentAmount = wasOnPhase1 ? 32 : 24
    let baseAngles = (360 / 8).toInt()
    let torrentSpawnAngleList = new LinkedList<int>
    
    for i = 1 to torrentAmount
      let spawnAngle = baseAngles * i
      torrentSpawnAngleList.add(spawnAngle)

    doPeriodicallyCounted(1.45, 3) (CallbackCounted cb) ->
      let internalTorrentSpawnAngleList = torrentSpawnAngleList.copy()..shuffle()
      
      actor.setAnimation("spell slam")

      for i = 1 to torrentAmount
        let currentangle = internalTorrentSpawnAngleList.dequeue()
        let currentTorrentSpawnAngle = (currentangle + GetRandomReal(-currentangle/4, currentangle/4)).asAngleDegrees()
        let projectilePos = actor.getPos().polarOffset(currentTorrentSpawnAngle, GetRandomReal(50, 900))
        
        let groundEffect = addEffect(MapModels.spellMarkerRed, projectilePos)..setScale(1.5)

        doAfter(1.55) -> 
          groundEffect.destr()
          flashEffect(Objects.nagaDeath, projectilePos)
          forUnitsInRange(projectilePos, 150) (unit u) ->
            if u.isAlive() and u.isEnemyOf(actor)
              actor.dealMagicalDamage(u, 300)
      
      destroy internalTorrentSpawnAngleList
      
      if cb.isLast()
        doAfter(1.5) -> 
          actor..unpause()
          ..queueAnimation("stand")
        destroy torrentSpawnAngleList

  function castWaves()
    WAVES_SOUND_ID.play()

    actor.pause()
    actor.setAnimation("spell chain")
    doAfter(1) -> 
      actor..unpause()
      ..queueAnimation("stand")

    new DummyCaster()
    ..owner(ENEMY_PLAYER)
    ..origin(actor.getPos())
    ..castPoint(WAVES_ID, 1, OrderIds.stampede, actor.getPos().polarOffset(GetRandomReal(1, 360).asAngleDegrees(), 10))

  function castSeaElementals()
    let aliveHeroUnits = heroUnitList.filter((unit u) -> u.isAlive())
    let numberOfSeaElementalsBasedOnNumberOfHeroes = (aliveHeroUnits.size() / 2).round()
    let numberOfSeaElementals = max(2, numberOfSeaElementalsBasedOnNumberOfHeroes)
    destroy aliveHeroUnits
    
    for i = 1 to numberOfSeaElementals
      let u = new Creep(SEA_ELEMENTAL_ID, gg_rct_ArenaPondBreathArea.randomPoint().toVec3(), angle(GetRandomReal(0, 359))).actor
      ..setAnimation("birth")
      ..queueAnimation("stand")

  function castUltimateSpell()
    let tpEffect = actor
    ..pause()
    .addEffect(Abilities.massTeleportCaster, AttachmentPoints.origin)

    doAfter(2) ->
      tpEffect.destr() 
      actor
      ..setInvulnerable(true)
      ..setPos(gg_rct_ArenaPond.getCenter())
      ..setFacing((270).asAngleDegrees())
        
      // Part 1. Rain with raising water and drowning zone
      let rainEffect = addWeather(gg_rct_ArenaPond, WeatherEffects.ashenvaleRainHeavy)..enable()
      let rainingLoop = ULT_RAINING_SOUND_LOOP.play()

      doAfter(6) -> 
        rainingLoop.snd.stop(false, true)

      let effectList = new LinkedList<effect>

      let iniPos = vec2(-2000, -2280)
      for i = 1 to 23
        for j = 1 to 10
          let effPos = vec2(iniPos.x + (j - 1) * 512, iniPos.y - (i - 1) * 512)
          effectList.add(addEffect(MapModels.planeWater, effPos.withZ(-90)))
      
      let overallHeightChange = 120
      let heightChangeInterval = 0.1
      let rainTime = 6.

      doPeriodicallyTimed(heightChangeInterval, rainTime) (CallbackCounted cb) ->
        for eff in effectList
          eff.setZ(eff.getPos3().z + overallHeightChange / (rainTime / heightChangeInterval))
      
      doAfter(rainTime) -> 
        rainEffect.disable()
        doAfter(2) -> 
          rainEffect.remove()

      let breatheRegion = CreateRegion()
      ..addRect(gg_rct_ArenaPondBreathArea)

      let drownEnterTrig = CreateTrigger()
      ..registerEnterRegion(breatheRegion, null)
      ..disable()
      ..addAction(() -> begin
        let u = EventData.getTriggerUnit()
        if u.hasBuff(DrowningBuff.typeId)
          u.removeBuffById(DrowningBuff.typeId)
      end)

      let drownLeaveTrig = CreateTrigger() // TODO remake to be Z axis based?
      ..registerLeaveRegion(breatheRegion, null)
      ..disable()
      ..addAction(() -> begin
        let u = EventData.getTriggerUnit()
        if u.isValidPlayerTarget()
          new DrowningBuff()..apply(u)
      end)

      doAfter(4) ->
        drownEnterTrig.enable()
        drownLeaveTrig.enable()

        forUnitsAll() (unit u) ->
          if u.isValidPlayerTarget() and not u.isInRegion(breatheRegion)
            new DrowningBuff()..apply(u)

      doAfter(5) -> 
        // Part 2. Homing water projectiles.
        let projectileDelay = wasOnPhase2 ? 1.5 : 2.5
        let numberOfProj = wasOnPhase2 ? 9 : 7

        doPeriodicallyCounted(projectileDelay, numberOfProj) (CallbackCounted cb) ->
          let aliveHeroUnits = heroUnitList.filter((unit u) -> u.isAlive())
          let target = aliveHeroUnits..shuffle().peek()
          destroy aliveHeroUnits

          let angleToTarget = actor.getPos().angleTo(target.getPos())
          actor.setFacing(angleToTarget)
          
          doAfter(0.1) ->
            if target.isAlive()
              ULT_PROJECTILE_SPAWN_SOUND.play() 
              let bossProjectile = new WaterBossKnockbackProjectile(actor.getPos().withHeightMap(), 64., owner, angleToTarget, MapModels.orbWaterX)
              ..setTimed(5)
              ..setSpeed(10)
              ..setTarget(target.getEntity(), HOMING.forced, 0.5)
              
              bossProjectile.getFx().eff.setScale(2.)
              bossProjectile.onHit() (unit target) ->
                if target.isValidPlayerTarget()
                  flashEffect(Abilities.crushingWaveDamage, bossProjectile.getPos())
                  target.getEntity().addVel(ZERO3.polarProject(1000 * ANIMATION_PERIOD, bossProjectile.getPos().angleTo2d(target.getPos()), 90 .fromDeg()))
                  actor.dealMagicalDamage(target, 350)
                  bossProjectile.terminate()

              let projectileTargetChangeListener = EventListener.add(target, EVENT_PLAYER_UNIT_DEATH) () ->
                let aliveHeroUnitsEvent = heroUnitList.filter((unit u) -> u.isAlive())

                if not aliveHeroUnitsEvent.isEmpty()
                  let targetEvent = aliveHeroUnitsEvent..shuffle().peek()
                  bossProjectile.setTarget(targetEvent.getEntity(), HOMING.angular, 0.5)
                destroy aliveHeroUnitsEvent
              
              bossProjectile.onEnd() -> 
                destroy projectileTargetChangeListener

            if cb.isLast()
              // Part 3. Draining water,  more homing projectiles.
              doAfter(1) -> 
                let waterOrbUlt = addEffect(MapModels.orbWaterX, actor.getPos().withHeightMap(725))

                let waterOrbPowerUpLightnings = new LinkedList<lightning>
                let baseAngle = 360 / 8

                ULT_ORB_POWERUP_SOUND.play()
                let powerUpSoundLoop = ULT_ORB_POWERUP_SOUND_LOOP.play()

                doAfter(6) -> 
                  powerUpSoundLoop.snd.stop(false, true)

                for i = 1 to 8
                  waterOrbPowerUpLightnings.add(
                    addLightning(LIGHTNING_DRAIN_MANA, false, actor.getPos().withHeightMap(870), actor.getPos().polarOffset((baseAngle * i).asAngleDegrees(), 2150.).withHeightMap())
                  )

                let numberOfSlowWaves = wasOnPhase2 ? 9 : 6

                doPeriodicallyCounted(0.8, numberOfSlowWaves) (CallbackCounted cb) ->
                  waterOrbUlt.setScale(waterOrbUlt.getScale() + 0.5)

                  for eff in effectList
                    eff.setZ(eff.getPos3().z - 65)

                  if cb.isLast()
                    for eff in effectList
                      eff.destr()

                    destroy effectList

                    for lightn in waterOrbPowerUpLightnings
                      lightn.destr()

                    destroy waterOrbPowerUpLightnings

                    breatheRegion.destr()
                    drownEnterTrig.destr()
                    drownLeaveTrig.destr()

                    forUnitsAll() (unit u) ->
                      if u.hasBuff(DrowningBuff.typeId)
                        u.removeBuffById(DrowningBuff.typeId)

                    doAfter(2) ->
                      let numberOfFastWaves = wasOnPhase2 ? 5 : 3
                      doPeriodicallyCounted(1.3, numberOfSlowWaves) (CallbackCounted cb) ->
                        flashEffect(Objects.nagaDeath, actor.getPos().withHeightMap(725))
                        waterOrbUlt.setScale(waterOrbUlt.getScale() - 0.6)
                        ULT_PROJECTILE_SPAWN_SOUND.play()

                        if not cb.isLast() 
                          for i = 1 to 8
                            let projectileOrb = new SmallWaterHomingProjectile(actor.getPos().withHeightMap(), 64, owner, GetRandomReal(1, 360).asAngleDegrees(), MapModels.orbWaterX)
                            ..setTarget(this, HOMING.none, 0.55)
                            ..setTimed(6)
                            ..setSpeed(20)

                            projectileOrb
                            ..onHit() (unit target) ->
                              if target.isValidPlayerTarget()
                                flashEffect(Abilities.crushingWaveDamage, projectileOrb.getPos())
                                bossList.peek().dealMagicalDamage(target, 250)
                                target.getEntity().addVel(ZERO3.polarProject(300 * ANIMATION_PERIOD, projectileOrb.getPos().angleTo2d(target.getPos()), 90 .fromDeg()))
                                projectileOrb.terminate()
                        else
                          waterOrbUlt.destr()

                          doPeriodicallyCounted(0.6, numberOfFastWaves) (CallbackCounted cb) ->
                            ULT_PROJECTILE_SPAWN_SOUND.play() 
                            for i = 1 to 8 
                              let projectileOrb = new SmallWaterHomingProjectile(actor.getPos().withHeightMap(), 64, owner, GetRandomReal(1, 360).asAngleDegrees(), MapModels.orbWaterX)
                              ..setTarget(this, HOMING.none, 0.55)
                              ..setTimed(6)
                              ..setSpeed(20)

                              projectileOrb
                              ..onHit() (unit target) ->
                                if target.isValidPlayerTarget()
                                  flashEffect(Abilities.crushingWaveDamage, projectileOrb.getPos())
                                  bossList.peek().dealMagicalDamage(target, 250)
                                  target.getEntity().addVel(ZERO3.polarProject(300 * ANIMATION_PERIOD, projectileOrb.getPos().angleTo2d(target.getPos()), 90 .fromDeg()))
                                  projectileOrb.terminate()
                          
                          doAfter(2) -> 
                            actor
                            ..setInvulnerable(false)
                            ..unpause()
                            ..queueAnimation("stand")

                            spellCycle()


class WaterBossKnockbackProjectile extends HomingProjectile
  static constant DISTANCE_NEEDED_FOR_EFFECT = 400
  var distanceTravelled = 0.

  construct(vec3 pos, real radius, player owner, angle xyAngle, string fxpath)
    super(pos, radius, owner, xyAngle, fxpath)

  override function update()
    let oldPos = pos
    super.update()
    let newPos = pos

    distanceTravelled += oldPos.distanceTo(newPos)

    if distanceTravelled >= DISTANCE_NEEDED_FOR_EFFECT and not done
      distanceTravelled -= DISTANCE_NEEDED_FOR_EFFECT

      // Effect trigger
      let projectileOrb1 = new Projectile(pos, 64, owner, getXYAngle() + (90.).asAngleDegrees(), MapModels.orbWaterX)
      ..setSpeed(13.)
      ..setRanged(800)

      projectileOrb1
      ..onHit() (unit target) ->
        if target.isValidPlayerTarget()
          flashEffect(Abilities.crushingWaveDamage, projectileOrb1.getPos())
          bossList.peek().dealMagicalDamage(target, 200)
          target.getEntity().addVel(ZERO3.polarProject(300 * ANIMATION_PERIOD, projectileOrb1.getPos().angleTo2d(target.getPos()), 90 .fromDeg()))
          projectileOrb1.terminate()

      let projectileOrb2 = new Projectile(pos, 64, owner, getXYAngle() - (90.).asAngleDegrees(), MapModels.orbWaterX)
      ..setSpeed(13.)
      ..setRanged(800)

      projectileOrb2
      ..onHit() (unit target) ->
        if target.isValidPlayerTarget()
          flashEffect(Abilities.crushingWaveDamage, projectileOrb2.getPos())
          bossList.peek().dealMagicalDamage(target, 200)
          target.getEntity().addVel(ZERO3.polarProject(300 * ANIMATION_PERIOD, projectileOrb2.getPos().angleTo2d(target.getPos()), 90 .fromDeg()))
          projectileOrb2.terminate()

class SmallWaterHomingProjectile extends HomingProjectile

  let numberOfUpdatesForHoming = (0.8 / ANIMATION_PERIOD).round()
  var currentUpdate = 0
  var homingWasApplied = false
  EventListener targetDeathListener

  construct(vec3 pos, real radius, player owner, angle xyAngle, string fxpath)
    super(pos, radius, owner, xyAngle, fxpath)

  override function update()
    currentUpdate++

    if currentUpdate >= numberOfUpdatesForHoming and not homingWasApplied
      homingWasApplied = true
      forNearestUnit(getPos().toVec2(), 6000, Filter(() -> heroUnitList.has(GetFilterUnit()) and GetFilterUnit().isAlive())) (unit u) ->
        setTarget(u.getEntity(), HOMING.forced, 0.7)
        targetDeathListener = EventListener.add(u, EVENT_PLAYER_UNIT_DEATH) -> 
          setTarget(this, HOMING.none, 0.7)

    super.update()

  ondestroy
    destroy targetDeathListener


public constant buffTuple = compiletime(createDummyBuffObject("Drowning", "Periodic damage.",  Icons.bTNAbsorbMagic))

class DrowningBuff extends NormalBuff
  construct()
    super(99999, buffTuple)

  override function update()
    super.update()
    bossList.peek().dealMagicalDamage(target, 180 *  BUFF_ANIM_PERIOD) // TODO attacker unit


@compiletime function genAbility()
  new UnitDefinition(GOD_OF_WATER_ID, UnitIds.waterelemental3)
  ..setAcquisitionRange(99999)
  ..setName("God of Water")
  ..setModelFile(MapModels.waterElemental)
  ..setAttack1ProjectileArt(Abilities.crushingWaveDamage)
  ..setAttack1CooldownTime(1.35)
  ..setAttack1DamageBase(400)
  ..setAttack1Range(650)
  ..setDefenseBase(25)
  ..setHitPointsMaximumBase(75000)
  ..setManaMaximum(2000)
  ..setManaInitialAmount(2000)
  ..setSpeedBase(330)
  ..setNormalAbilities(commaList(AbilityIds.inventory))
  ..setScalingValue(2.8)
  ..setArmorType(ArmorType.Divine)
  ..setAttack1AttackType(AttackType.Chaos)

  new UnitDefinition(SEA_ELEMENTAL_ID, UnitIds.seaelemental)
  ..setAcquisitionRange(99999)
  ..setName("Sea Elemental")
  ..setAttack1CooldownTime(1.3)
  ..setAttack1DamageBase(149)
  ..setAttack1Range(450)
  ..setAttack1DamageNumberofDice(1)
  ..setAttack1DamageSidesperDie(1)
  ..setHitPointsMaximumBase(6000)
  ..setHitPointsRegenerationRate(0)
  ..setDefenseBase(6)
  ..setNormalAbilities("")
  ..setArmorType(ArmorType.Small)
  ..setAttack1AttackType(AttackType.Siege)

  new AbilityDefinitionBeastMasterStampede(WAVES_ID)
  ..setLevels(1)
  ..setDummyAbility()
  ..setBeastsPerSecond(1, 16)
  ..setBeastCollisionRadius(1, 64)
  ..setDamageAmount(1, 250)
  ..setMissileArt(Abilities.waterElementalMissile)
  ..setDurationNormal(1, 7)
  ..setAreaofEffect(1, 2000)
  ..setEffectSound("")
  ..setEffectSoundLooping(Sounds.monsoonRainLoop)
  ..setArtSpecial("")
