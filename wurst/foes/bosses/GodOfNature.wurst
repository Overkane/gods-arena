package GodOfNature
import GameConstants
import Boss
import AbilityTooltipGenerator
import ClosureTimers
import OrderIds
import BonusHandler
import ClosureForGroups
import Assets
import SoundUtils
import InstantDummyCaster
import Projectile
import HornOfTheGod
import Hero
import Creep
import Heightmap
import DamageSystem
import CustomHeal
import MapModels
import ProjectileRepeater
import GeneralFunctions
import Reference

enum BossPhases
  PHASE1
  PHASE2
  PHASE3

constant ROOTS_ID = compiletime(ABIL_ID_GEN.next())

constant GOD_OF_NATURE_ID = compiletime(UNIT_ID_GEN.next())
constant TREANT_ID = compiletime(UNIT_ID_GEN.next())

constant BOSS_MUSIC_THEME = new SoundDefinition(Sounds.doom)

constant POISON_SOUND = new SoundDefinition(Sounds.corrosiveBreathMissileTarget1)

public class GodOfNature extends Boss
  private constant castQueue = new LinkedList<int>

  private constant poisonCloudProjList = new LinkedList<ProjectileRepeater>

  private var currentPhase = BossPhases.PHASE1 
  private var needToCastUltimateSpell = false 

  // Effects which boss will have, when casting ultimate spell
  private effect tranqEf
  private effect invulEf

  construct(vec3 pos, angle ang)
    super(GOD_OF_NATURE_ID, pos, ang)

    actor.addItemById(HORN_OF_THE_GOD_ITEM.getNewId())
    
    BOSS_MUSIC_THEME.play()
    new SoundDefinition(Sounds.o05Cenarius29).play()
    
    spellCycle()

    EventListener.add(actor, EVENT_PLAYER_UNIT_DEATH) () ->
      forUnitsAll() (unit u) ->
        if u.getTypeId() == TREANT_ID
          u.kill()

      poisonCloudProjList.forEach() (ProjectileRepeater projectile) ->
        projectile.terminate()
        
      BOSS_MUSIC_THEME.play(0, 0)

    DamageEvent.addListener() ->
      let tunit = DamageEvent.getTarget()

      if tunit == actor 
        if tunit.getHPRatio() <= 0.7 and currentPhase == BossPhases.PHASE1
          needToCastUltimateSpell = true
        else if tunit.getHPRatio() <= 0.4 and currentPhase == BossPhases.PHASE2
          needToCastUltimateSpell = true

  function spellCycle()
    real spellCd
    switch currentPhase
      case BossPhases.PHASE1
        spellCd = 9.        
      case BossPhases.PHASE2
        spellCd = 7. 
      case BossPhases.PHASE3
        spellCd = 5. 

    doAfter(spellCd) ->
      if actor.isAlive()
        if needToCastUltimateSpell
          ultimateSpell()
        else
          if castQueue.isEmpty()
            for i = 0 to 2
              castQueue.add(i)
            castQueue.shuffle()
          actor.setAnimation("cast")
          let rand = castQueue.pop()
          switch rand
            case 0
              summonTreants()
            case 1
              poisonClouds(false)
            case 2
              entangleRoots()
          spellCycle()

  function summonTreants()
    let aliveHeroUnits = heroUnitList.filter((unit u) -> u.isAlive())
    let numberOfTreantsBasedOnNumberOfHeroes = (aliveHeroUnits.size() / 2).round()
    let numberOfTreants = max(2, numberOfTreantsBasedOnNumberOfHeroes)
    destroy aliveHeroUnits
    
    real powerUpInterval
    switch currentPhase
      case BossPhases.PHASE1
        powerUpInterval = 3.        
      case BossPhases.PHASE2
        powerUpInterval = 2.25 
      case BossPhases.PHASE3
        powerUpInterval = 1.5 

    for i = 1 to numberOfTreants
      let u = new Creep(TREANT_ID, gg_rct_ArenaForest.randomPoint().toVec3(), angle(GetRandomReal(0, 359))).actor
      flashEffect(Objects.entBirthTarget, u.getPos())
      doPeriodicallyCounted(powerUpInterval, 8) cb ->
        u..addBonus(Bonus.LIFE, u.getMaxHP() * 0.1)
        ..addBonus(Bonus.DAMAGE, 10)
        ..setMoveSpeed(u.getMoveSpeed() - 18)
        ..setScale(2 - 0.14 * cb.getCount())

  function poisonClouds(bool isSecondCall)
    let aliveHeroUnits = heroUnitList.filter((unit u) -> u.isAlive())..shuffle()
    let numberOfProjectiles = max(1., aliveHeroUnits.size() / 3).round()

    for i = 1 to numberOfProjectiles
      let affectedUnit = aliveHeroUnits.dequeue()
      let affectedUnitEffect = addEffect(MapModels.spellMarkerRed, affectedUnit, AttachmentPoints.origin)

      doAfter(2) -> 
        affectedUnitEffect.destr()
        let affectedUnitPos = affectedUnit.getPos()
        let groundEffect = addEffect(MapModels.spellMarkerRed, affectedUnitPos)

        doAfter(1.5) -> 
          let poisonProjectile = new Projectile(affectedUnitPos.withHeightMap(800), 64, 
            ENEMY_PLAYER, (0).asAngleDegrees(), Abilities.chimaeraAcidMissile)

          poisonProjectile.getFx().setOrientation(eulerToQuat(0., 270., 0.))

          poisonProjectile
          ..setPointTarget(affectedUnitPos.withHeightMap(), 20.)
          ..onEnd() ->
            groundEffect.destr()
            
            // Deals damage each 0.6 second
            let poisonCloudProj = new ProjectileRepeater(affectedUnitPos.withHeightMap(), 168, ENEMY_PLAYER, angle(0), Units.plagueCloud, 20)
            ..setTimed(30)
            ..onHit() (unit target) ->
              if target.isValidPlayerTarget()
                actor.dealMagicalDamage(target, 125)
                POISON_SOUND.playForPlayer(target.getOwner())

            poisonCloudProjList.add(poisonCloudProj)

            poisonCloudProj.onEnd() ->
              if poisonCloudProjList.has(poisonCloudProj) 
                poisonCloudProjList.remove(poisonCloudProj)

        if not isSecondCall
          switch currentPhase
            case BossPhases.PHASE1
              skip        
            case BossPhases.PHASE2
              doAfter(2.) -> 
                poisonClouds(true)
            case BossPhases.PHASE3
              doAfter(2.) ->
                poisonClouds(true) 

    destroy aliveHeroUnits

  function entangleRoots()
    actor
    ..setAnimation("spell")
    ..pause()

    let variation = GetRandomInt(1, 2)
    castRoots(variation)

    doAfter(1.5) -> 
      if currentPhase == BossPhases.PHASE2 or currentPhase == currentPhase.PHASE3
        let reverseVariaton = variation == 1 ? 2 : 1
        castRoots(reverseVariaton)
        doAfter(1.5) -> 
          actor.unpause()
      else
        actor.unpause()

  function castRoots(int variation)
    let baseCircleAOE = 100
    let radiusAOE = 200 * variation
    let numberOfCircles = 4
    
    doPeriodicallyCounted(0.2, numberOfCircles) (CallbackCounted cb) ->
      let currentRadiusAOE = radiusAOE + 300 * (numberOfCircles - cb.getCount())
      let circleNumber = (PI / Asin(baseCircleAOE / currentRadiusAOE)).round()
      let circleAngles = 360 / circleNumber
    
      for i = 1 to circleNumber
        let currentAngle = circleAngles * i
        let circlePos = actor.getPos().polarOffset(currentAngle.asAngleDegrees(), currentRadiusAOE.toReal())
        let groundEffect = addEffect(MapModels.spellMarkerRed, circlePos)

        doAfter(1.5) -> 
          groundEffect.destr()
          flashEffect(Abilities.entanglingRootsTarget, circlePos)
          forUnitsInRange(circlePos, 100) (unit u) ->
            if u.isValidPlayerTarget()
              InstantDummyCaster.castTarget(ENEMY_PLAYER, ROOTS_ID, 1, OrderIds.entanglingroots, u)
              doPeriodicallyTimed(1, 3) (CallbackCounted cb) ->
                actor.dealMagicalDamage(u, 125)

  function ultimateSpell()
    let tpEffect = actor
    ..pause()
    .addEffect(Abilities.massTeleportCaster, AttachmentPoints.origin)

    doAfter(2) ->
      tpEffect.destr() 
      
      tranqEf = actor
      ..setInvulnerable(true)
      ..setPos(gg_rct_ArenaForest.getCenter())
      ..setFacing((270).asAngleDegrees())
      .addEffect(Abilities.tranquility, AttachmentPoints.origin)

      invulEf = actor.addEffect(Abilities.divineShieldTarget, AttachmentPoints.origin)

      int wispAmount
      switch currentPhase
        case BossPhases.PHASE1
          wispAmount = 16
        case BossPhases.PHASE2
          wispAmount = 24
        // Shouldn't be possible, since ultimate spell is casted only on phase 1 and 2.
        case BossPhases.PHASE3
          wispAmount = 0
          error("Calling ultimate spell on phase 3")

      let baseAngles = (360 / (wispAmount / 2)).toInt()
      let wispSpawnAngleList = new LinkedList<int>
      
      for i = 1 to wispAmount
        let spawnAngle = baseAngles * i
        wispSpawnAngleList.add(spawnAngle)

      doAfter(2.) -> 
        castWispSpell(wispAmount, wispSpawnAngleList, false)

        doPeriodicallyCounted(6, 2) (CallbackCounted cb) ->
          castWispSpell(wispAmount, wispSpawnAngleList, cb.isLast())

          if cb.isLast()
            if currentPhase == BossPhases.PHASE1
              currentPhase = BossPhases.PHASE2
            else if currentPhase == BossPhases.PHASE2
              currentPhase = BossPhases.PHASE3
            else
              error("Calling ultimate spell on phase 3")

            destroy wispSpawnAngleList

  function castWispSpell(int wispAmount, LinkedList<int> wispSpawnAngleList, bool lastWispWave)
    let internalWispSpawnAngleList = wispSpawnAngleList.copy()..shuffle()
    let healWispNumber = GetRandomInt(1, wispAmount)
    var wispNumber = 0
    let wispsLeft = new Reference(wispAmount)

    doPeriodicallyCounted(0.1, wispAmount) (CallbackCounted cb) ->
      wispNumber++

      let currentangle = internalWispSpawnAngleList.dequeue()
      let currentWispSpawnAngle = (currentangle + GetRandomReal(-currentangle/5, currentangle/5)).asAngleDegrees()
      let distance = 600. + GetRandomReal(100, gg_rct_ArenaForest.height() / 2 - 300)
      let projectilePos = actor.getPos().polarOffset(currentWispSpawnAngle, distance)
      let projectileModel = wispNumber == healWispNumber ? Objects.runicobject : Units.wisp1
      let fallingProjectile = new Projectile(projectilePos.withHeightMap(800), 64, 
        ENEMY_PLAYER, (0).asAngleDegrees(), projectileModel)

      let markerModel = wispNumber == healWispNumber ? MapModels.spellMarkerGreen : MapModels.spellMarkerRed
      let groundEffect = addEffect(markerModel, projectilePos.withHeightMap())..setScale(2)

      if wispNumber == healWispNumber
        fallingProjectile.getFx().setTint(colorA(0, 255, 0, 255))

      fallingProjectile
      ..setPointTarget(projectilePos.withHeightMap(), 17. + GetRandomInt(1, 4))
      ..onEnd() ->
        groundEffect.destr()
        let isHealingWisp = wispNumber == healWispNumber

        flashEffect(Abilities.warStompCaster, projectilePos)
        forUnitsInRange(projectilePos, 200) (unit u) ->
          if u.isValidPlayerTarget()
            actor.dealMagicalDamage(u, 350)

        let movingProjectile = new Projectile(projectilePos.withHeightMap(), 64, 
          ENEMY_PLAYER, (0).asAngleDegrees(), projectileModel)

        movingProjectile
        ..setTarget(actor.getPos().withHeightMap(), 6. + GetRandomReal(3, 4))
        ..setRanged(distance)
        ..onHit() (unit target) ->
          if isHealingWisp
            if heroUnitList.has(target) and target.isAlive()
              flashEffect(Abilities.holyBoltSpecialArt, target, AttachmentPoints.origin)
              neutralHeal(target, target.getMaxHP() * 0.3)

              movingProjectile.terminate()
            else if target == actor and target.isAlive()
              flashEffect(Abilities.holyBoltSpecialArt, target, AttachmentPoints.origin)
              neutralHeal(target, target.getMaxHP() * 0.1)
              target.addBonus(Bonus.DAMAGE, 30)

              movingProjectile.terminate()
          else
            if target.isValidPlayerTarget()
              flashEffect(Abilities.fireLordDeathExplode, target, AttachmentPoints.origin)
              actor.dealMagicalDamage(target, 300)

              movingProjectile.terminate()
        
        // After last wisp in last wave is dead, need to activate the boss again
        if lastWispWave
          movingProjectile.onEnd() ->
            wispsLeft.val--

            if wispsLeft.val == 0
              actor
              ..setInvulnerable(false)
              ..unpause()

              needToCastUltimateSpell = false
              spellCycle()
              
              tranqEf.destr()
              invulEf.destr()

        if isHealingWisp
          movingProjectile.getFx()
          ..setTint(colorA(0, 255, 0, 255))

      if cb.isLast()
        destroy wispsLeft
        destroy internalWispSpawnAngleList


@compiletime function genAbility()
  new UnitDefinition(GOD_OF_NATURE_ID, UnitIds.keeperofthegrove)
  ..setAcquisitionRange(99999)
  ..setName("God of Nature")
  ..setAttack1DamageBase(200)
  ..setAttack1CooldownTime(1.2)
  ..setDefenseBase(7)
  ..setHitPointsMaximumBase(42500)
  ..setManaMaximum(1000)
  ..setManaInitialAmount(1000)
  ..setSpeedBase(350)
  ..setScalingValue(2.6)
  ..setArmorType(ArmorType.Divine)
  ..setAttack1AttackType(AttackType.Chaos)

  new UnitDefinition(TREANT_ID, UnitIds.forceofnature)
  ..setAcquisitionRange(99999)
  ..setAttack1DamageBase(20)
  ..setDefenseBase(0)
  ..setSpeedBase(350)
  ..setHitPointsMaximumBase(250)
  ..setArmorType(ArmorType.Small)
  ..setAttack1AttackType(AttackType.Siege)
  ..setScalingValue(0.6)

  new AbilityDefinitionKeeperoftheGroveEntanglingRoots(ROOTS_ID)
  ..setDummyAbility()
  ..setLevels(1)
  ..setDurationHero(1, 3)
  ..setDurationNormal(1, 3)
