package Arenas
import Arena
import ClosureTimers
import ForestWaves
import PondWaves
import BarrensWaves
import VolcanoWaves

public function startArenas()
  Arena.first.start(false)

init
  nullTimer() -> 
    new Arena("The Forest", gg_rct_ArenaForest, gg_rct_ArenaForestRespawnPoint)
    ..setSpawnPoint(() -> begin
      let rand = GetRandomInt(0, 1)
      var spawnLoc = ZERO2
      switch rand
        case 0
          spawnLoc = gg_rct_ArenaForestTopLeftSpawn.randomPoint()
        case 1
          spawnLoc = gg_rct_ArenaForestTopRightSpawn.randomPoint()
      return spawnLoc
    end)
    ..setWaves(forestWaves)

    new Arena("The Pond", gg_rct_ArenaPond, gg_rct_ArenaPondRespawnPoint)
    ..setSpawnPoint(() -> gg_rct_ArenaPond.getCenter().polarOffset(GetRandomReal(0, 360).fromDeg(), 1700))
    ..setWaves(pondWaves)

    new Arena("The Barrens", gg_rct_ArenaBarrens, gg_rct_ArenaBarrensRespawnPoint)
    ..setSpawnPoint(() -> begin
      let rand = GetRandomInt(0, 1)
      var spawnLoc = ZERO2
      switch rand
        case 0
          spawnLoc = gg_rct_ArenaBarrensTopSpawn.randomPoint()
        case 1
          spawnLoc = gg_rct_ArenaBarrensBotSpawn.randomPoint()
      return spawnLoc
    end)
    ..setWaves(barrensWaves)
    
    new Arena("The Volcano", gg_rct_ArenaVolcano, gg_rct_ArenaVolcanoRespawnPoint)
    ..setSpawnPoint(() -> begin
      let rand = GetRandomInt(0, 3)
      var spawnLoc = ZERO2
      switch rand
        case 0
          spawnLoc = gg_rct_ArenaVolcanoTopSpawn.randomPoint()
        case 1
          spawnLoc = gg_rct_ArenaVolcanoBotSpawn.randomPoint()
        case 2
          spawnLoc = gg_rct_ArenaVolcanoLeftSpawn.randomPoint()
        case 3
          spawnLoc = gg_rct_ArenaVolcanoRightSpawn.randomPoint()
      return spawnLoc
    end)
    ..setWaves(volcanoWaves)
    