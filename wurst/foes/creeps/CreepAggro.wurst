package CreepAggro
import DamageEvent
import GameConstants
import HashMap
import LinkedList
import UnitIndexer
import Orders
import PlayerData
import GameTimer
import Abilities
import AttachmentPoints
import ClosureTimers
import BonusHandler
import CustomStatSystem

constant SECONDS_TO_RAGE = 20

class AggroEntry
    unit source
    var aggro = 0.

    construct(unit source, real aggro)
        this.source = source
        this.aggro = aggro

constant aggroMap = new HashMap<unit, LinkedList<AggroEntry>>()
constant lastAttackOrder = new HashMap<unit, real>
constant lastSuccessfulAttack = new HashMap<unit, real>

public function unit.clearAggro()
    let aggroList = aggroMap.get(this)
    lastAttackOrder.remove(this)
    if aggroList != null
        for aggro in aggroList
            destroy aggro
        aggroList.clear()

public function unit.enrage()
    this.setVertexColor(225, 125, 125, 225)
    this.setMoveSpeed(this.getMoveSpeed() + 75)
    this.addBonus(Bonus.ATTACKSPEED, 25)
    let eff = this.addEffect(Abilities.bloodLustTarget, AttachmentPoints.chest)

    doAfter(1.) ->
        eff.destr()

interface AggroMergeFn<T>
    function apply(T curr, T new_) returns T

constant AggroMergeFn<real> ADDING_MERGE_FN = (curr, new_) -> curr + new_
constant AggroMergeFn<real> MAXING_MERGE_FN = (curr, new_) -> max(new_, curr)

public function unit.mergeAggro(unit target, real amount, AggroMergeFn<real> merge_fn)
    let source = this
    if not aggroMap.has(target)
        aggroMap.put(target, new LinkedList<AggroEntry>())

    if source != null
        let aggroList = aggroMap.get(target)
        let first = aggroList.getFirst()
        var found = false
        for aggro in aggroList
            if aggro.source == source
                aggro.aggro = merge_fn.apply(aggro.aggro, amount)
                found = true
            else
                aggro.aggro *= 0.925

            if source.hasStat(CustomUnitStats.THREAT_GENERATION)
                aggro.aggro = aggro.aggro * (1 + source.getStat(CustomUnitStats.THREAT_GENERATION))

        if not found
            aggroList.add(new AggroEntry(source, amount))

        aggroList.sortWith((a, b) -> (b.aggro - a.aggro).toInt())

        let lastAttack = lastAttackOrder.get(target)
        if first != aggroList.getFirst() and not lastAttackOrder.has(target) or lastAttack < currentTime - 3
            target.issueTargetOrderById(OrderIds.attack, source)
            lastAttackOrder.put(target, currentTime)

public function unit.addAggro(unit target, real amount)
    this.mergeAggro(target, amount, ADDING_MERGE_FN)

public function unit.maxAggro(unit target, real amount)
    this.mergeAggro(target, amount, MAXING_MERGE_FN)

init
    DamageEvent.addListener() ->
        var source = DamageEvent.getSource()
        let target = DamageEvent.getTarget()
        let sourceOwner = source.getOwner()
        let targetOwner = target.getOwner()

        if targetOwner == ENEMY_PLAYER and sourceOwner.isHuman() and not target.isType(UNIT_TYPE_PEON)
            if source.hasAbility(LOCUST_ID)
                let pdata = pData.get(sourceOwner)
                if pdata != null
                    source = pdata.getHero().hero.actor

            source.addAggro(target, DamageEvent.getAmount())

            let lastAttack = lastSuccessfulAttack.get(target)
            if lastAttack + SECONDS_TO_RAGE < currentTime
                target.enrage()

        else if sourceOwner == ENEMY_PLAYER
            let lastAttack = lastSuccessfulAttack.get(source)
            if lastAttack + SECONDS_TO_RAGE < currentTime
                source.enrage()
            lastSuccessfulAttack.put(source, currentTime)


    onUnitIndex() ->
        lastSuccessfulAttack.put(getIndexingUnit(), currentTime)

    onUnitDeindex() ->
        let u = getIndexingUnit()
        lastAttackOrder.remove(u)
        lastSuccessfulAttack.remove(u)
        let aggro = aggroMap.getAndRemove(u)
        if aggro != null
            for agg in aggro
                destroy agg
            destroy aggro
