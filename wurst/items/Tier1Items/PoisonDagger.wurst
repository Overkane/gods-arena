package PoisonDagger
import TooltipFactory
import PassiveAbilityPreset
import RecipeItem
import MapIcons
import PoisonDaggerBuff
import Buff
import IronSword
import Emerald

constant POISON_ID = compiletime(ABIL_ID_GEN.next())
constant POISON_AGI_MULTIPLIER = 20.
constant POISON_DURATION = 3.

constant ABIL_TOOLTIP = itemAbilityTooltip(AbilityType.PASSIVE,
  "Poison", 
  "attacks poison the target which deals " + ("[Hero Agility] * " + POISON_AGI_MULTIPLIER.percRound()).color(COLOR_GOLD_STR) + MAGICAL_DAMAGE_STRING + " damage per second and lasts " + POISON_DURATION.color(COLOR_GOLD_STR) + " seconds. Stacks.")

public constant POISON_DAGGER_ITEM = compiletime(new RecipeItem()
..setName("Poison Dagger")
..setInterfaceIcon(MapIcons.bTNsacrificialdagger)
..addBonus(Bonus.DAMAGE, 18)
..addBonus(Bonus.AGILITY, 9)
..setAbilities(commaList(POISON_ID))
..generateTooltip(ABIL_TOOLTIP)
)..register()

public constant POISON_DAGGER_RECIPE = new ItemRecipe()
..gold(130)
..setRequiredItems(IRON_SWORD_ITEM, EMERALD_ITEM)
..setResultItem(POISON_DAGGER_ITEM)

init
  DamageEvent.addListener() -> 
    let sunit = DamageEvent.getSource()
    let tunit = DamageEvent.getTarget()

    if DamageEvent.getType() == DamageType.ATTACK and sunit.hasItemById(POISON_DAGGER_ITEM.getNewId()) and not sunit.isIllusion() and sunit.isEnemyOf(tunit)
      let poisonDamage = sunit.getAgi(true) * POISON_AGI_MULTIPLIER / 100 * BUFF_ANIM_PERIOD

      new PoisonDaggerBuff(POISON_DURATION, sunit, poisonDamage).apply(tunit)

@compiletime function genItemAbils()
  new PassiveAbilityPreset(POISON_ID, 1)
