package Bloodsucker
import TooltipFactory
import PassiveAbilityPreset
import RecipeItem
import Buff
import initlater Leecher
import MaskOfDeath
import IronSword
import Emerald
import CustomHeal

constant LIFESTEAL_VALUE = 12

constant ABIL_TOOLTIP = itemAbilityTooltip(AbilityType.PASSIVE,
  "Life Restore", 
  "successful basic attacks restore {0} hit points.".format(
    LIFESTEAL_VALUE.color(COLOR_GOLD_STR))
    + " Doesn't stack.".color(IMPORTANT_COLOR))

public constant BLOODSUCKER_ITEM = compiletime(new RecipeItem()
..setName("Bloodsucker")
..setInterfaceIcon(Icons.bTNImpale)
..addBonus(Bonus.DAMAGE, 31)
..addBonus(Bonus.AGILITY, 14)
..generateTooltip(ABIL_TOOLTIP)
)..register()

public constant BLOODSUCKER_RECIPE = new ItemRecipe()
..gold(250)
..setRequiredItems(IRON_SWORD_ITEM, MASK_OF_DEATH_ITEM, EMERALD_ITEM)
..setResultItem(BLOODSUCKER_ITEM)

init
  DamageEvent.addListener(99) -> 
    let sunit = DamageEvent.getSource()
    let tunit = DamageEvent.getTarget()

    if DamageEvent.getType() == DamageType.ATTACK 
      and sunit.hasItemById(BLOODSUCKER_ITEM.getNewId()) and not sunit.hasItemById(LEECHER_ITEM.getNewId())
      and not sunit.isIllusion() and sunit.isEnemyOf(tunit)
      
      neutralHeal(sunit, LIFESTEAL_VALUE.toReal())
