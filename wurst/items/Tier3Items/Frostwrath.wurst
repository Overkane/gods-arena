package Frostwrath
import TooltipFactory
import PassiveAbilityPreset
import MagesSword
import PoisonDagger
import RecipeItem
import DamageSystem
import FrostwrathBuff
import Buff

constant FROSTBITE_ID = compiletime(ABIL_ID_GEN.next())
constant FROSTBITE_INT_MULTIPLIER = 30.
constant FROSTBITE_DURATION = 3.

constant ABIL_TOOLTIP = itemAbilityTooltip(AbilityType.PASSIVE,
  "Frostbite", 
  "attacks frostbite the target which deals " + ("[Hero Agility] * " + FROSTBITE_INT_MULTIPLIER.percRound()).color(COLOR_GOLD_STR) + " " + MAGICAL_DAMAGE_STRING + " damage per second. "
    + getDurationString(FROSTBITE_DURATION.round()) 
    + " Stacks.")

public constant FROSTWRATH_ITEM = compiletime(new RecipeItem()
..setName("Frostwrath")
..setInterfaceIcon(Icons.bTNFrostMourne)
..addBonus(Bonus.DAMAGE, 50)
..addBonus(Bonus.AGILITY, 20)
..addBonus(Bonus.INTELLIGENCE, 20)
..addCustomStat(CustomUnitStats.SPELL_CRIT_CHANCE, 20)
..addCustomStat(CustomUnitStats.SPELL_CRIT_POWER, 60)
..setAbilities(commaList(FROSTBITE_ID))
..generateTooltip(ABIL_TOOLTIP)
)..register()

public constant FROSTWRATH_RECIPE = new ItemRecipe()
..gold(440)
..setRequiredItems(POISON_DAGGER_ITEM, MAGES_SWORD_ITEM)
..setResultItem(FROSTWRATH_ITEM)

init
  DamageEvent.addListener() -> 
    let sunit = DamageEvent.getSource()
    let tunit = DamageEvent.getTarget()

    if DamageEvent.getType() == DamageType.ATTACK and sunit.hasItemById(FROSTWRATH_ITEM.getNewId()) and not sunit.isIllusion() and sunit.isEnemyOf(tunit)
      let frostbiteDamage = sunit.getAgi(true) * FROSTBITE_INT_MULTIPLIER / 100 * BUFF_ANIM_PERIOD

      new FrostwrathBuff(FROSTBITE_DURATION, sunit, frostbiteDamage).apply(tunit)

@compiletime function genItemAbils()
  new PassiveAbilityPreset(FROSTBITE_ID, 1)
