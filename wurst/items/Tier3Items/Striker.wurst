package Striker
import TooltipFactory
import PassiveAbilityPreset
import RecipeItem
import CustomStatSystem
import Buff
import MapIcons
import FuryBuff
import Fury
import PlatedGauntlets

constant BASH_ID = compiletime(ABIL_ID_GEN.next())
constant BASH_CHANCE = 19
constant BASH_DURATION = 0.8
constant BASH_DAMAGE = 100

constant FURY_ID = compiletime(ABIL_ID_GEN.next())
constant FURY_MAX_AS = 100.
constant FURY_BONUS_AS = 3.
constant FURY_DURATION = 5.

constant ABIL_TOOLTIP = itemAbilityTooltip(AbilityType.PASSIVE,
  "Knockdown", 
  "gives " + BASH_CHANCE.colorPerc(COLOR_GOLD_STR) + " chance to bash on attack for " + BASH_DURATION.color(COLOR_GOLD_STR) + " seconds with " 
  + BASH_DAMAGE.color(COLOR_GOLD_STR) + " bonus damage.")

constant ABIL_TOOLTIP2 = itemAbilityTooltip(AbilityType.PASSIVE,
  "Fury", 
  "each attack on the same target increase attack speed by " + FURY_BONUS_AS.colorPerc(COLOR_GOLD_STR) + "."
    + "Max attack speed bonus is " + FURY_MAX_AS.color(COLOR_GOLD_STR) + "."
    + "When attack target is changed or "+ FURY_DURATION.color(COLOR_GOLD_STR) + " seconds are passed effect disappears and all accumulated attack speed is lost. " 
    + "Multiple items don't stack.".color(IMPORTANT_COLOR))

public constant STRIKER_ITEM = compiletime(new RecipeItem()
..setName("Striker")
..setInterfaceIcon(MapIcons.bTNIronFistCannonPunch)
..addBonus(Bonus.DAMAGE, 36)
..addBonus(Bonus.ATTACKSPEED, 36)
..addBonus(Bonus.ARMOR, 6)
..addBonus(Bonus.STRENGTH, 20)
..addBonus(Bonus.AGILITY, 16)
..addCustomStat(CustomUnitStats.ATTACK_POWER, 16)
..setAbilities(commaList(BASH_ID, FURY_ID))
..generateTooltip(ABIL_TOOLTIP + "\n\n" + ABIL_TOOLTIP2)
)..register()

public constant STRIKER_RECIPE = new ItemRecipe()
..gold(450)
..setRequiredItems(FURY_ITEM, PLATED_GAUNTLETS_ITEM)
..setResultItem(STRIKER_ITEM)

init
  FuryBuff.maxAS = FURY_MAX_AS

  DamageEvent.addListener() -> 
    let sunit = DamageEvent.getSource()
    let tunit = DamageEvent.getTarget()

    if DamageEvent.getType() == DamageType.ATTACK and sunit.hasItemById(STRIKER_ITEM.getNewId()) and not sunit.isIllusion() and sunit.isEnemyOf(tunit)
      if FuryBuff.buffTargets[sunit.getIndex()] != tunit
        sunit.removeBuffById(FuryBuff.typeId)
        FuryBuff.buffTargets[sunit.getIndex()] = tunit

      new FuryBuff(FURY_DURATION, FURY_BONUS_AS).apply(sunit)

@compiletime function genItemAbils()
  new AbilityDefinitionBashcreep(BASH_ID)
  ..setChancetoBash(1, BASH_CHANCE.toReal())
  ..setDamageBonus(1, BASH_DAMAGE.toReal())
  ..setDurationNormal(1, BASH_DURATION)
  ..setDurationHero(1, BASH_DURATION / 2)

  new PassiveAbilityPreset(FURY_ID, 1)
