package CloakOfShadows
import MapIcons
import RecipeItem
import AbilityObjEditing
import ObjectIdGenerator
import ObjectIds
import TooltipFactory
import NinjaCloak
import GlovesOfHaste
import IronSword
import DamageSystem
import CustomHeal

constant PHASE_STEP_ID = compiletime(ABIL_ID_GEN.next())
constant PHASE_STEP_DURATION = 5
constant MANA_COST = 25
constant COOLDOWN = 18

constant EVASION_HEALING_ID = compiletime(ABIL_ID_GEN.next())
constant EVASION_HEALING = 0.25

constant ABIL_TOOLTIP = itemAbilityTooltip(AbilityType.ACTIVE,
  "Phase Step", 
  "allows owner to walk through other units. "
    + getDurationString(PHASE_STEP_DURATION),
    COOLDOWN, MANA_COST)

constant ABIL_TOOLTIP2 = itemAbilityTooltip(AbilityType.PASSIVE,
  "Evasion Healing", 
  "evasion heals {0} of damage evaded.".format((EVASION_HEALING * 100).percRound().color(COLOR_GOLD_STR))
    + " Doesn't stack.".color(IMPORTANT_COLOR))

public constant CLOAK_OF_SHADOWS_ITEM = compiletime(new RecipeItem()
..setName("Cloak of Shadows")
..setInterfaceIcon(MapIcons.bTNCloakOfShadows)
..setActivelyUsed(true)
..addBonus(Bonus.DAMAGE, 15)
..addBonus(Bonus.ATTACKSPEED, 10)
..addBonus(Bonus.LIFE, 200)
..addBonus(Bonus.AGILITY, 15)
..addCustomStat(CustomUnitStats.EVASION, 15)
..setAbilities(commaList(PHASE_STEP_ID))
..setCooldownGroup(PHASE_STEP_ID.toRawCode())
..generateTooltip(ABIL_TOOLTIP + "\n\n" + ABIL_TOOLTIP2)
)..register()

public constant CLOAK_OF_SHADOWS_RECIPE = new ItemRecipe()
..gold(545)
..setRequiredItems(IRON_SWORD_ITEM, GLOVES_OF_HASTE_ITEM, NINJA_CLOAK_ITEM)
..setResultItem(CLOAK_OF_SHADOWS_ITEM)

init
  OnEvade.add() (unit u, real damageEvaded) ->
    if u.hasItemById(CLOAK_OF_SHADOWS_ITEM.getNewId())
      let healingAmount = damageEvaded * EVASION_HEALING

      if healingAmount > 1
        neutralHeal(u, healingAmount)

@compiletime function genItemAbils()
  new AbilityDefinitionWindWalk(PHASE_STEP_ID)
  ..setTransitionTime(1, 5)
  ..setMovementSpeedIncrease(1, 0)
  ..setBackstabDamage(1, false)
  ..setDurationHero(1, PHASE_STEP_DURATION.toReal())
  ..setDurationNormal(1, PHASE_STEP_DURATION.toReal())
  ..setManaCost(1, MANA_COST)
  ..setCooldown(1, COOLDOWN.toReal())
