package Thornmail
import RecipeItem
import PassiveAbilityPreset
import Provoker
import SpikedArmor
import TooltipFactory
import DamageSystem
import ClosureForGroups
import ClosureEvents
import CooldownGroups
import ChannelAbilityPreset
import CreepAggro
import Abilities

constant RETALIATE_ID = compiletime(ABIL_ID_GEN.next())
constant RETALIATE_VALUE = 8

constant PROVOCATE_ID = compiletime(ABIL_ID_GEN.next())
constant PROVOCATE_AGGRO_PER_LVL = 100.
constant PROVOCATE_AOE = 500.
constant MANA_COST = 75
constant COOLDOWN = 30

constant ABIL_TOOLTIP = itemAbilityTooltip(AbilityType.ACTIVE,
  "Provocate", 
  "clears the aggro amount for allied heroes of enemies within " + PROVOCATE_AOE.round().color(COLOR_GOLD_STR) 
    + " range. Increases aggro amount for the item holder by " 
    + ("[Hero Level] * " + PROVOCATE_AGGRO_PER_LVL.toString(0)).color(COLOR_GOLD_STR) + ".",
    COOLDOWN, MANA_COST)

constant ABIL_TOOLTIP2 = itemAbilityTooltip(AbilityType.PASSIVE,
  "Retaliate", 
  "deals " + ("[Hero Level] * " + RETALIATE_VALUE.toString()).color(COLOR_GOLD_STR) + " " 
    + PURE_DAMAGE_STRING + " damage to the attacker.")

public constant THORNMAIL_ITEM = compiletime(new RecipeItem()
..setName("Thornmail")
..setInterfaceIcon(Icons.bTNThornShield)
..setActivelyUsed(true)
..addBonus(Bonus.DAMAGE, 25)
..addBonus(Bonus.LIFE, 900)
..addBonus(Bonus.ARMOR, 12)
..addCustomStat(CustomUnitStats.THREAT_GENERATION, 25)
..setAbilities(commaList(RETALIATE_ID, PROVOCATE_ID))
..setCooldownGroup(PROVOCATE_COOLDOWN_GROUP_ID.toRawCode())
..generateTooltip(ABIL_TOOLTIP + "\n\n" + ABIL_TOOLTIP2)
)..register()

public constant THORNMAIL_RECIPE = new ItemRecipe()
..gold(430)
..setRequiredItems(SPIKED_ARMOR_ITEM, PROVOKER_ITEM)
..setResultItem(THORNMAIL_ITEM)

init
  EventListener.onCast(PROVOCATE_ID) (unit caster) ->
    forUnitsInRange(caster.getPos(), PROVOCATE_AOE) (unit u) ->
      if u.isEnemyOf(caster.getOwner()) and u.isAlive()
        u.clearAggro()
        caster.addAggro(u, PROVOCATE_AGGRO_PER_LVL * caster.getLevel())

  DamageEvent.addUnreducedListener(DamageEvents.FINAL castTo int) -> 
    let sunit = DamageEvent.getSource()
    let tunit = DamageEvent.getTarget()

    if DamageEvent.getType() == DamageType.ATTACK and tunit.hasItemById(THORNMAIL_ITEM.getNewId()) and not tunit.isIllusion() and sunit.isEnemyOf(tunit)
      tunit.dealPureDamage(sunit, tunit.getLevel().toReal() * RETALIATE_VALUE)

@compiletime function genItemAbils()
  new PassiveAbilityPreset(RETALIATE_ID, 1)

  new ChannelAbilityPreset(PROVOCATE_ID, 1, true)
  ..setArtCaster(Abilities.tauntCaster)
  ..setManaCost(1, MANA_COST)
  ..setCooldown(1, COOLDOWN.toReal())
