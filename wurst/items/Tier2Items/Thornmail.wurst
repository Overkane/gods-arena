package Thornmail
import RecipeItem
import Icons
import PassiveAbilityPreset
import SimpleArmor
import HeartAmulet
import IronSword
import TooltipFactory
import DamageSystem

constant RETALIATE_ID = compiletime(ABIL_ID_GEN.next())

constant ABIL_TOOLTIP = itemAbilityTooltip(AbilityType.PASSIVE,
  "Retaliate", 
  "deals " + "[Hero Level] * 10".color(COLOR_GOLD_STR) + " pure damage to the attacker. Multiple items don't stack.")

public constant THORNMAIL_ITEM = compiletime(new RecipeItem()
..setName("Thornmail")
..setInterfaceIcon(Icons.bTNThornShield)
..addBonus(Bonus.DAMAGE, 20)
..addBonus(Bonus.LIFE, 550)
..addBonus(Bonus.ARMOR, 5)
..setAbilities(commaList(RETALIATE_ID))
..generateTooltip(ABIL_TOOLTIP)
)..register()

public constant THORNMAIL_RECIPE = new ItemRecipe()
..gold(135)
..setRequiredItems(SIMPLE_ARMOR_ITEM, HEART_AMULET_ITEM, IRON_SWORD_ITEM)
..setResultItem(THORNMAIL_ITEM)

init
  DamageEvent.addUnreducedListener() -> 
    let sunit = DamageEvent.getSource()
    let tunit = DamageEvent.getTarget()

    if DamageEvent.getType() == DamageType.ATTACK and tunit.hasItemById(THORNMAIL_ITEM.getNewId()) and not tunit.isIllusion()
      tunit.dealPureDamage(sunit, tunit.getLevel().toReal() * 10)

@compiletime function genItemAbils()
  new PassiveAbilityPreset(RETALIATE_ID, 1)
