package HeavyAxe
import Icons
import RecipeItem
import TooltipFactory
import RubyAxe
import initlater DraculasAxe
import ClosureForGroups
import DamageSystem

constant SPLASH_VALUE = 0.25
constant SPLASH_AOE = 250

constant ABIL_TOOLTIP = itemAbilityTooltip(AbilityType.PASSIVE,
  "Cleaving Attack", 
  "successful basic attacks deal {0} of the damage dealt to the enemies in {1} radius of the target.".format(
    (SPLASH_VALUE * 100).percRound().color(COLOR_GOLD_STR), SPLASH_AOE.color(COLOR_GOLD_STR)
  ) + " Lifesteal and any damage modifications don't work with this type of damage.".color(IMPORTANT_COLOR)
    + " Works on ranged heroes.".color(POSITIVE_COLOR)
    + " Doesn't stack.".color(IMPORTANT_COLOR))

public constant HEAVY_AXE_ITEM = compiletime(new RecipeItem()
..setName("Heavy Axe")
..setInterfaceIcon(Icons.bTNSpiritWalkerMasterTraining)
..addBonus(Bonus.DAMAGE, 45)
..addBonus(Bonus.STRENGTH, 16)
..addCustomStat(CustomUnitStats.ATTACK_POWER, 10)
..generateTooltip(ABIL_TOOLTIP)
)..register()

public constant HEAVY_AXE_RECIPE = new ItemRecipe()
..gold(435)
..setRequiredItems(RUBY_AXE_ITEM)
..setResultItem(HEAVY_AXE_ITEM)

init
  DamageEvent.addListener(99) -> 
    let sunit = DamageEvent.getSource()
    let tunit = DamageEvent.getTarget()

    if DamageEvent.getType() == DamageType.ATTACK 
      and sunit.hasItemById(HEAVY_AXE_ITEM.getNewId()) and not sunit.hasItemById(DRACULAS_AXE_ITEM.getNewId())
      and sunit.isEnemyOf(tunit)
      
      let splashDamage = DamageEvent.getAmount() * SPLASH_VALUE
      forUnitsInRange(tunit.getPos(), SPLASH_AOE.toReal()) (unit u) ->
        if u != tunit
          sunit.dealSplashPhysicalDamage(u, splashDamage)
