package FrameMultiboard

public class FrameMultiboard
  private var rowCount = 0
  private var columnCount = 0
  private var padding = vec2(0, 0)

  constant multiboardFrame = createFrame("FRAME", "multiboardFrame", GAME_UI, "", 0)
  private constant itemFrameTable = InitHashtable()

  private constant multiboardBackdrop = createFrame("QuestButtonBaseTemplate", multiboardFrame, 0, 0)..setAllPoints(multiboardFrame)

  construct(framepointtype framepoint, vec2 position)
    multiboardFrame
    ..setAbsPoint(framepoint, position)
    ..hide()

  construct(framepointtype framepoint, framehandle relativeFrame, framepointtype relativeFramePoint, vec2 offset)
    multiboardFrame
    ..setPoint(framepoint, relativeFrame, relativeFramePoint, offset)
    ..hide()

  function isVisible() returns bool
    return multiboardFrame.isVisible()
    
  function show()
    multiboardFrame.show()

  function show(player p)
    multiboardFrame.show(p)

  function hide()
    multiboardFrame.hide()

  function hide(player p)
    multiboardFrame.hide(p)

  function toggleView(player p)
    multiboardFrame.setVisible(p, not multiboardFrame.isVisible())

  function getRowCount() returns int
    return rowCount
  
  function getColumnCount() returns int
    return columnCount

  function setRowCount(int rowCount)
    if rowCount < this.rowCount
      let removedRowsCount = this.rowCount - rowCount

      for row = this.rowCount - 1 to this.rowCount - removedRowsCount
        for column = 0 to columnCount - 1
          getItem(row, column).remove()
          itemFrameTable.removeHandle(row, column)

    this.rowCount = rowCount
    updateItemFrameTable()

  function setColumnCount(int columnCount)
    if columnCount < this.columnCount
      let removedColumnCount = this.columnCount - columnCount

      for column = this.columnCount - 1 to this.columnCount - removedColumnCount
        for row = 0 to rowCount - 1
          getItem(row, column).remove()
          itemFrameTable.removeHandle(row, column)

    this.columnCount = columnCount
    updateItemFrameTable()

  function setItemsWidth(real width)
    for row = 0 to rowCount - 1
      for column = 0 to columnCount - 1
        getItem(row, column).setWidth(width)
    updateSize()

  function setItemsHeight(real height)
    for row = 0 to rowCount - 1
      for column = 0 to columnCount - 1
        getItem(row, column).setHeight(height)
    updateSize()

  function setItemsSize(real width, real height)
    for i = 0 to rowCount - 1
      for j = 0 to columnCount - 1
        getItem(i, j).setSize(width, height)
    updateSize()

  function setItemWidth(int row, int column, real width)
    getItem(row, column).setWidth(width)
    updateSize()

  function setRowWidth(int row, real width)
    for column = 0 to columnCount - 1
      setItemWidth(row, column, width)
    updateSize()

  function setColumnWidth(int column, real width)
    for row = 0 to rowCount - 1
      setItemWidth(row, column, width)
    updateSize()

  function setItemHeight(int row, int column, real height)
    getItem(row, column).setHeight(height)
    updateSize()

  function setRowHeight(int row, real height)
    for column = 0 to columnCount - 1
      setItemHeight(row, column, height)
    updateSize()

  function setColumnHeight(int column, real height)
    for row = 0 to rowCount - 1
      setItemHeight(row, column, height)
    updateSize()

  function setItemSize(int row, int column, real width, real height)
    getItem(row, column).setSize(width, height)
    updateSize()

  function setRowSize(int row, real width, real height)
    for column = 0 to columnCount - 1
      setItemSize(row, column, width, height)
    updateSize()

  function setColumnSize(int column, real width, real height)
    for row = 0 to rowCount - 1
      setItemSize(row, column, width, height)
    updateSize()

  function setItemValue(int row, int column, string value)
    getItem(row, column).setText(value)

  function setItemColor(int row, int column, colorA color)
    getItem(row, column).setTextColor(color)

  function setPadding(vec2 padding)
    this.padding = padding
    updateSize()

  function getItem(int row, int column) returns framehandle
    return itemFrameTable.loadFrameHandle(row, column)

  private function updateItemFrameTable()
    for row = 0 to rowCount - 1
      for column = 0 to columnCount - 1
        if itemFrameTable.loadFrameHandle(row, column) == null
          let itemFrame = createFrame("TEXT", "item", multiboardFrame, "", row + column)
          ..setTextAlignment(TEXT_JUSTIFY_MIDDLE, TEXT_JUSTIFY_CENTER)
          
          if row == 0 and column == 0 // Top left cell
            itemFrame.setPoint(FRAMEPOINT_TOPLEFT, multiboardFrame, FRAMEPOINT_TOPLEFT)
          else if row != 0 and column == 0 // First cell in column
            itemFrame.setPoint(FRAMEPOINT_TOPLEFT, getItem(row - 1, column), FRAMEPOINT_BOTTOMLEFT)
          else
            itemFrame.setPoint(FRAMEPOINT_LEFT, getItem(row, column - 1), FRAMEPOINT_RIGHT)
          
          itemFrameTable.saveFrameHandle(row, column, itemFrame)
    updateSize()

  private function updateSize()
    var width = 0.
    var tempWidth = 0.
    
    var height = 0.
    var tempHeight = 0.

    for row = 0 to rowCount - 1
      for column = 0 to columnCount - 1
        tempWidth += getItem(row, column).getWidth()

      if tempWidth > width
        width = tempWidth
      tempWidth = 0

    for column = 0 to columnCount - 1
      for row = 0 to rowCount - 1
        tempHeight += getItem(row, column).getHeight()

      if tempHeight > height
        height = tempHeight
      tempHeight = 0

    if rowCount > 0 and columnCount > 0
      getItem(0, 0).setPoint(FRAMEPOINT_TOPLEFT, multiboardFrame, FRAMEPOINT_TOPLEFT, vec2(padding.x, -padding.y))

    multiboardFrame.setSize(width + padding.x * 2, height + padding.y * 2)
