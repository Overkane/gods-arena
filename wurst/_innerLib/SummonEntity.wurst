package SummonEntity
import BonusHandler
import CustomStatSystem
import PhysicsEntity

public class SummonEntity extends UnitEntity
  use PhysicsModule

  construct(unit summoner, int typId, vec3 pos, angle ang)
    super(createUnit(summoner.getOwner(), typId, pos.toVec2(), ang))
    actor
    ..setAnimation("birth")
    ..queueAnimation("stand")

    var casterPower = summoner.getStat(CustomUnitStats.SPELL_POWER)
    
    if summoner.hasStat(CustomUnitStats.SPELL_CRIT_CHANCE) and summoner.hasStat(CustomUnitStats.SPELL_CRIT_POWER)
      let spellCritChance = summoner.getStat(CustomUnitStats.SPELL_CRIT_CHANCE)
      if spellCritChance > GetRandomReal(0, 1)
        casterPower = casterPower + casterPower * summoner.getStat(CustomUnitStats.SPELL_CRIT_POWER)
    
    let bonusDamage = actor.getBaseDamage(0) * casterPower
    let bonusAS = 2 * (1 + casterPower) / actor.getAttackCooldown(0)
    let bonusHP = actor.getMaxHP() * casterPower
    let bonusArmor = actor.getArmor() * casterPower

    actor
    ..addBonus(Bonus.DAMAGE, bonusDamage)
    ..addBonus(Bonus.ATTACKSPEED, bonusAS)
    ..addBonus(Bonus.LIFE, bonusHP)
    ..addBonus(Bonus.ARMOR, bonusArmor)

    if actor.getMaxMana() != 0
      let bonusMP = actor.getMaxMana() * casterPower
      actor.addBonus(Bonus.MANA, bonusMP)

  override function update()
    super.update()
    // Object can be destroyed in super call, so need to check if it is not
    if not done
      physicsUpdate(this)