package SaveLoadSystem
import GameConstants
import PlayerData
import SaveLoadData
import SLCrypto
import HashMap

constant FILE_NAME = "Gods' Arena/{0}/PlayerData"

constant loadedPlayerHonorPoints = new HashMap<player, int>

public function loadPlayerData()
  pData.forEach() (player p, PlayerData playerData) ->
    p.loadData(FILE_NAME.format(p.getName())) (status, data) ->
      if status == LoadStatus.SUCCESS
        let honorPoints = sl_decrypt(data.getUnsafeString())
  
        p..print("You successfully loaded " + honorPoints + " honor points.", 5)
        ..addLumber(honorPoints.toInt())

        loadedPlayerHonorPoints.put(p, honorPoints.toInt())
      else
        p.print("Save file is not found.", 5)

        loadedPlayerHonorPoints.put(p, 0)

public function savePlayerData()
  if not allowSave
    print("You can't save in single player.", 5)
    return
  
  pData.forEach() (player p, PlayerData playerData) ->
    let arenaPoints = pData.get(p).getArenaPoints()

    if arenaPoints >= ARENA_POINTS_THRESHOLD
      let earnedHonorPoints = (arenaPoints / ARENA_POINTS_THRESHOLD).floor()
      let loadedHonorPoints = loadedPlayerHonorPoints.get(p)
      
      if loadedHonorPoints >= earnedHonorPoints
        p.print("Your save file has more honor points than you want to save. Saving is aborted.", 5)
      else
        let fileName = FILE_NAME.format(p.getName())

        p..print("You successfully saved " + earnedHonorPoints.toString() + " honor points.", 5)
        ..saveData(fileName, sl_encrypt(earnedHonorPoints.toString()))

    else 
      p.print("You don't have honor points to save.", 5)
