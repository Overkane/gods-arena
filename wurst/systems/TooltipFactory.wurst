package TooltipFactory
import CustomStatSystem
import RecipeItem

constant ACTIVE_TOOLTIP_COLOR = COLOR_GOLD_STR
constant PASSIVE_TOOLTIP_COLOR = COLOR_GOLD_STR
constant ABILITY_NAME_COLOR = color(106, 194, 221).toColorString()

public constant PHYSICAL_COLOR = colorA(223, 59, 33, 255).toColorString()
public constant MAGICAL_COLOR = colorA(91, 147, 209, 255).toColorString()
public constant PURE_COLOR = colorA(194, 156, 74, 255).toColorString()
public constant UTILITY_COLOR = colorA(35, 170, 58, 255).toColorString()

enum CustomStatType
  PHYSICAL
  MAGICAL
  UTILITY

public enum AbilityType
  PASSIVE
  ACTIVE

public function CustomUnitStats.getStatType() returns CustomStatType
  switch this
    case BONUS_ATTACK_DAMAGE | ATTACK_POWER | ATTACK_CRIT_POWER | ATTACK_CRIT_CHANCE | LIFESTEAL
      return CustomStatType.PHYSICAL
    case BONUS_SPELL_DAMAGE | SPELL_POWER | SPELL_CRIT_POWER | SPELL_CRIT_CHANCE | SPELL_LIFESTEAL
      return CustomStatType.MAGICAL
    case EVASION | MAGIC_RESISTANCE | THREAT_GENERATION
      return CustomStatType.UTILITY

public function CustomUnitStats.toString() returns string
  switch this
    case BONUS_ATTACK_DAMAGE
      return "Bonus Damage"
    case ATTACK_POWER
      return "Attack Power"
    case ATTACK_CRIT_POWER
      return "Attack Crit Power"
    case ATTACK_CRIT_CHANCE
      return "Attack Crit Chance"
    case LIFESTEAL
      return "Physical Lifesteal"
    case BONUS_SPELL_DAMAGE
      return "Bonus Spell Damage"
    case SPELL_POWER
      return "Spell Power"
    case SPELL_CRIT_POWER
      return "Spell Crit Power"
    case SPELL_CRIT_CHANCE
      return "Spell Crit Chance"
    case SPELL_LIFESTEAL
      return "Spell Lifesteal"
    case EVASION
      return "Evasion"
    case MAGIC_RESISTANCE
      return "Magic Resistance"
    case THREAT_GENERATION
      return "Threat Generation"

public function CustomUnitStats.getMeasure() returns string
  switch this
    case BONUS_ATTACK_DAMAGE
      return ""
    case ATTACK_POWER
      return "%"
    case ATTACK_CRIT_POWER
      return "%"
    case ATTACK_CRIT_CHANCE
      return "%"
    case LIFESTEAL
      return "%"
    case BONUS_SPELL_DAMAGE
      return ""
    case SPELL_POWER
      return "%"
    case SPELL_CRIT_POWER
      return "%"
    case SPELL_CRIT_CHANCE
      return "%"
    case SPELL_LIFESTEAL
      return "%"
    case EVASION
      return "%"
    case MAGIC_RESISTANCE
      return "%"
    case THREAT_GENERATION
      return "%"

public function real.percRound() returns string
  return (this.toString(0) + "%")

public function real.percRound(int precision) returns string
  return (this.toString(precision) + "%")

// To avoid redundant toString() calls.
public function real.color(string which) returns string
  return this.toString().color(which)

// To avoid redundant toString() calls.
public function int.color(string which) returns string
  return this.toString().color(which)

// To avoid redundant toString() calls and % uses.
public function real.colorPerc(string which) returns string
  return (this.toString() + "%").color(which)

// To avoid redundant toString() calls and % uses.
public function int.colorPerc(string which) returns string
  return (this.toString() + "%").color(which)

public function RecipeItem.addCustomStat(CustomUnitStats customStat, real amount)
  var result = ""

  var tooltipColor = PHYSICAL_COLOR

  if customStat.getStatType() == CustomStatType.MAGICAL
    tooltipColor = MAGICAL_COLOR
  else if customStat.getStatType() == CustomStatType.UTILITY
    tooltipColor = UTILITY_COLOR

  if amount >= 0
    result += COLOR_GOLD_STR + "+"
  else
    result += color(205,55,55).toColorString()
  
  result += amount.round().toString()

  result += customStat.getMeasure() + "|r " + tooltipColor + customStat.toString() + "|r"

  var statAmount = amount
  if customStat.getMeasure() == "%"
    statAmount = amount / 100

  this.addTooltipProperty(result, u -> u.addStat(customStat, statAmount),  u -> u.addStat(customStat, -statAmount))
    
  

public function itemAbilityTooltip(AbilityType abilityType, string abilityName, string abilityDescription) returns string
  var itemAbilityTooltip = ""
  
  if abilityType == AbilityType.ACTIVE
    itemAbilityTooltip += "Active".color(ACTIVE_TOOLTIP_COLOR)
  else
    itemAbilityTooltip += "Passive".color(PASSIVE_TOOLTIP_COLOR)
  
  itemAbilityTooltip += " - " + abilityName.color(ABILITY_NAME_COLOR) + " - "

  itemAbilityTooltip += abilityDescription

  return itemAbilityTooltip