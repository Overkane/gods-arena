package HonorShop
import ClosureTimers
import Icons
import UnitIds
import PlayerData
import TooltipFactory
import BonusHandler
import CustomStatSystem
import Entity
import AbilityTooltipGenerator
import HeroPreset

constant HONOR_SHOP_ID = compiletime(HERO_ID_GEN.next())
constant HONOR_SHOP_UPGRADE_LEVELS = 11

constant ABIL_MIGHT = compiletime(ABIL_ID_GEN.next())
constant MIGHT_STR = 1.
constant MIGHT_AD = 2.
constant MIGHT_ACP = 0.5

constant ABIL_ENDURANCE = compiletime(ABIL_ID_GEN.next())
constant END_HP = 30.
constant END_HPREG = 0.5
constant END_ARMOR = 0.5

constant ABIL_DEXTERITY = compiletime(ABIL_ID_GEN.next())
constant DEX_AGI = 1.
constant DEX_AP = 1.
constant DEX_EV = 0.5

constant ABIL_QUICKNESS = compiletime(ABIL_ID_GEN.next())
constant QUICK_AS = 2.5
constant QUICK_MS = 2.5
constant QUIKC_LS = 0.5

constant ABIL_MIND = compiletime(ABIL_ID_GEN.next())
constant MIND_INT = 1.
constant MIND_SP = 1.
constant MIND_SCP = 0.5

constant ABIL_WISDOM = compiletime(ABIL_ID_GEN.next())
constant WISD_MANA = 17.
constant WISD_MANAREG = 0.2
constant WISD_SL = 0.5

constant ABIL_LUCK = compiletime(ABIL_ID_GEN.next())
constant LUCK_ACC = 1.
constant LUCK_SCC = 1.
constant LUCK_EV = 0.5

public constant honorShopUnits = new LinkedList<unit>

init
  EventListener.add(EVENT_PLAYER_UNIT_SPELL_FINISH) ->
    let p = EventData.getTriggerPlayer()
    
    if pData.has(p)
      pData.get(p).getHero().ifPresent() (h) ->
        let heroUnit = h.actor
        let caster = EventData.getTriggerUnit()
        let spellId = EventData.getSpellAbilityId()

        if spellId == ABIL_MIGHT
          if p.getLumber() < 1
            printTimedToPlayer("You don't have enough honor points.", 2, EventData.getTriggerPlayer())  
          else
            p.addLumber(-1)
            
            heroUnit.addBonus(Bonus.STRENGTH, MIGHT_STR)
            heroUnit.addBonus(Bonus.DAMAGE, MIGHT_AD)
            heroUnit.addStat(CustomUnitStats.ATTACK_CRIT_POWER, MIGHT_ACP/100)
            
            caster.incAbilityLevel(spellId)
            if caster.getAbilityLevel(spellId) == 11
              caster.disableAbility(spellId, true, false)

        if spellId == ABIL_ENDURANCE
          if p.getLumber() < 1
            printTimedToPlayer("You don't have enough honor points.", 2, EventData.getTriggerPlayer())  
          else
            p.addLumber(-1)

            heroUnit.addBonus(Bonus.LIFE, END_HP)
            heroUnit.addBonus(Bonus.LIFEREGEN, END_HPREG)
            heroUnit.addBonus(Bonus.ARMOR, END_ARMOR)

            caster.incAbilityLevel(spellId)
            if caster.getAbilityLevel(spellId) == 11
              caster.disableAbility(spellId, true, false)

        else if spellId == ABIL_DEXTERITY
          if p.getLumber() < 1
            printTimedToPlayer("You don't have enough honor points.", 2, EventData.getTriggerPlayer())  
          else
            p.addLumber(-1)

            heroUnit.addBonus(Bonus.AGILITY, DEX_AGI)
            heroUnit.addStat(CustomUnitStats.ATTACK_POWER, DEX_AP/100)
            heroUnit.addStat(CustomUnitStats.EVASION, DEX_EV/100)

            caster.incAbilityLevel(spellId)
            if caster.getAbilityLevel(spellId) == 11
              caster.disableAbility(spellId, true, false)

        else if spellId == ABIL_QUICKNESS
          if p.getLumber() < 1
            printTimedToPlayer("You don't have enough honor points.", 2, EventData.getTriggerPlayer())  
          else
            p.addLumber(-1)

            heroUnit.addBonus(Bonus.ATTACKSPEED, QUICK_AS)
            heroUnit.setMoveSpeed(heroUnit.getMoveSpeed() + QUICK_MS)
            heroUnit.addStat(CustomUnitStats.LIFESTEAL, QUIKC_LS/100)

            caster.incAbilityLevel(spellId)
            if caster.getAbilityLevel(spellId) == 11
              caster.disableAbility(spellId, true, false)

        else if spellId == ABIL_MIND
          if p.getLumber() < 1
            printTimedToPlayer("You don't have enough honor points.", 2, EventData.getTriggerPlayer())  
          else
            p.addLumber(-1)

            heroUnit.addBonus(Bonus.INTELLIGENCE, MIND_INT)
            heroUnit.addStat(CustomUnitStats.SPELL_POWER, MIND_SP/100)
            heroUnit.addStat(CustomUnitStats.SPELL_CRIT_POWER, MIND_SCP/100)

            caster.incAbilityLevel(spellId)
            if caster.getAbilityLevel(spellId) == 11
              caster.disableAbility(spellId, true, false)

        else if spellId == ABIL_WISDOM
          if p.getLumber() < 1
            printTimedToPlayer("You don't have enough honor points.", 2, EventData.getTriggerPlayer())  
          else
            p.addLumber(-1)

            heroUnit.addBonus(Bonus.MANA, WISD_MANA)
            heroUnit.addBonus(Bonus.MANAREGEN, WISD_MANAREG)
            heroUnit.addStat(CustomUnitStats.SPELL_LIFESTEAL, WISD_SL/100)

            caster.incAbilityLevel(spellId)
            if caster.getAbilityLevel(spellId) == 11
              caster.disableAbility(spellId, true, false)

        else if spellId == ABIL_LUCK
          if p.getLumber() < 1
            printTimedToPlayer("You don't have enough honor points.", 2, EventData.getTriggerPlayer())  
          else
            p.addLumber(-1)

            heroUnit.addStat(CustomUnitStats.ATTACK_CRIT_CHANCE, LUCK_ACC/100)
            heroUnit.addStat(CustomUnitStats.SPELL_CRIT_CHANCE, LUCK_SCC/100)
            heroUnit.addStat(CustomUnitStats.EVASION, LUCK_EV/100)

            caster.incAbilityLevel(spellId)
            if caster.getAbilityLevel(spellId) == 11
              caster.disableAbility(spellId, true, false)

  doPeriodically(1) (CallbackPeriodic cb) ->
    updateHonorShopPos()

function updateHonorShopPos()
  for honorShop in honorShopUnits
    let heroUnit = pData.get(honorShop.getOwner()).getHero().hero.actor
    if heroUnit.isAlive()
      honorShop.setPos(heroUnit.getPos())

public class HonorShop extends UnitEntity
  constant unit unitOwner

  construct(player p, unit hero)
    super(createUnit(p, HONOR_SHOP_ID, vec2(0, 0), angle(0)))
    honorShopUnits.add(actor)
    unitOwner = hero

  ondestroy
    honorShopUnits.remove(actor)

@compiletime function gen()
  new HeroPreset(HONOR_SHOP_ID, UnitIds.circleofpower, "Honor Shop")
  ..setProperNames("Honor Shop")
  ..setIconGameInterface(Icons.bTNMedalionOfCourage)
  ..hideHeroDeathMsg(true)
  ..hideHeroMinimapDisplay(true)
  ..setHideMinimapDisplay(true)
  ..addNormalAbility(AbilityIds.invulnerable)
  ..addNormalAbility(ABIL_MIGHT)
  ..addNormalAbility(ABIL_ENDURANCE)
  ..addNormalAbility(ABIL_DEXTERITY)
  ..addNormalAbility(ABIL_QUICKNESS)
  ..addNormalAbility(ABIL_MIND)
  ..addNormalAbility(ABIL_WISDOM)
  ..addNormalAbility(ABIL_LUCK)
  ..setArmorType(ArmorType.Divine)
  ..setModelFile("")
  ..setScalingValue(0.)
  ..setSelectionScale(0)
  ..setCollisionSize(0.)
  ..setSightRadiusDay(0)
  ..setSightRadiusNight(0)
  ..setIsaBuilding(false)
  ..buildHero()

  // Upgrades for honor shop
  var tooltip = new AbilityTooltipGenerator("Increases " + "Strength".color(COLOR_GOLD_STR) + " by " + MIGHT_STR.color(COLOR_GOLD_STR) + ".\n" +
    "Increases " + "Attack Damage (AD)".color(COLOR_GOLD_STR) + " by " + MIGHT_AD.color(COLOR_GOLD_STR) + ".\n" +
    "Increases " + "Attack Crit Power (ACP)".color(COLOR_GOLD_STR) + " by " + MIGHT_ACP.colorPerc(COLOR_GOLD_STR) + ".")
  new ChannelAbilityPreset(ABIL_MIGHT, HONOR_SHOP_UPGRADE_LEVELS, true, tooltip)
  ..presetButtonPosNormal(0, 0)
  ..presetHotkey("Q")
  ..presetIcon(Icons.bTNDeathPact)
  ..tooltipStartListen()
  ..setName("Might")
  ..addTooltipProperty("Honor Points Cost", lvl -> "1")
  ..addTooltipProperty("Bonus Strength", lvl -> MIGHT_STR * (lvl-1))
  ..addTooltipProperty("Bonus AD", lvl -> MIGHT_AD * (lvl-1))
  ..addTooltipProperty("Bonus ACP (%)", lvl -> MIGHT_ACP * (lvl-1))
  ..tooltipStopListen()

  tooltip = new AbilityTooltipGenerator("Increases " + "Hit Points (HP)".color(COLOR_GOLD_STR) + " by " + END_HP.color(COLOR_GOLD_STR) + ".\n" +
    "Increases " + "Armor".color(COLOR_GOLD_STR) + " by " + END_ARMOR.color(COLOR_GOLD_STR) + ".\n" +
    "Increases " + "Hit Point Regeneration (HPR)".color(COLOR_GOLD_STR) + " by " + END_HPREG.color(COLOR_GOLD_STR) + ".")
  new ChannelAbilityPreset(ABIL_ENDURANCE, HONOR_SHOP_UPGRADE_LEVELS, true, tooltip)
  ..presetButtonPosNormal(0, 1)
  ..presetHotkey("A")
  ..presetIcon(Icons.bTNClayFigurine)
  ..tooltipStartListen()
  ..setName("Endurance")
  ..addTooltipProperty("Honor Points Cost", lvl -> "1")
  ..addTooltipProperty("Bonus HP", lvl -> END_HP * (lvl-1))
  ..addTooltipProperty("Bonus Armor", lvl -> END_ARMOR * (lvl-1))
  ..addTooltipProperty("Bonus HPR", lvl -> END_HPREG * (lvl-1))
  ..tooltipStopListen()

  tooltip = new AbilityTooltipGenerator("Increases " + "Agility".color(COLOR_GOLD_STR) + " by " + DEX_AGI.color(COLOR_GOLD_STR) + ".\n" +
    "Increases " + "Attack Power (AP)".color(COLOR_GOLD_STR) + " by " + DEX_AP.colorPerc(COLOR_GOLD_STR) + ".\n" +
    "Increases " + "Evasion".color(COLOR_GOLD_STR) + " by " + DEX_EV.colorPerc(COLOR_GOLD_STR) + ".")
  new ChannelAbilityPreset(ABIL_DEXTERITY, HONOR_SHOP_UPGRADE_LEVELS, true, tooltip)
  ..presetButtonPosNormal(1, 0)
  ..presetHotkey("W")
  ..presetIcon(Icons.bTNEvasion)
  ..tooltipStartListen()
  ..setName("Dexterity")
  ..addTooltipProperty("Honor Points Cost", lvl -> "1")
  ..addTooltipProperty("Bonus Agility", lvl -> DEX_AGI * (lvl-1))
  ..addTooltipProperty("Bonus AP (%)", lvl -> DEX_AP * (lvl-1))
  ..addTooltipProperty("Bonus Evasion (%)", lvl -> DEX_EV * (lvl-1))
  ..tooltipStopListen()

  tooltip = new AbilityTooltipGenerator("Increases " + "Attack Speed (AS)".color(COLOR_GOLD_STR) + " by " + QUICK_AS.color(COLOR_GOLD_STR) + ".\n" +
    "Increases " + "Movement Speed (MS)".color(COLOR_GOLD_STR) + " by " + QUICK_MS.color(COLOR_GOLD_STR) + ".\n" +
    "Increases " + "Lifesteal".color(COLOR_GOLD_STR) + " by " + QUIKC_LS.colorPerc(COLOR_GOLD_STR) + ".")
  new ChannelAbilityPreset(ABIL_QUICKNESS, HONOR_SHOP_UPGRADE_LEVELS, true, tooltip)
  ..presetButtonPosNormal(1, 1)
  ..presetHotkey("S")
  ..presetIcon(Icons.bTNBootsOfSpeed)
  ..tooltipStartListen()
  ..setName("Quickness")
  ..addTooltipProperty("Honor Points Cost", lvl -> "1")
  ..addTooltipProperty("Bonus AS", lvl -> QUICK_AS * (lvl-1))
  ..addTooltipProperty("Bonus MS", lvl -> QUICK_MS * (lvl-1))
  ..addTooltipProperty("Bonus Lifesteal (%)", lvl -> QUIKC_LS * (lvl-1))
  ..tooltipStopListen()

  tooltip = new AbilityTooltipGenerator("Increases " + "Intelligence".color(COLOR_GOLD_STR) + " by " + MIND_INT.color(COLOR_GOLD_STR) + ".\n" +
    "Increases " + "Spell Power (SP)".color(COLOR_GOLD_STR) + " by " + MIND_SP.colorPerc(COLOR_GOLD_STR) + ".\n" +
    "Increases " + "Spell Crit Power (SCP)".color(COLOR_GOLD_STR) + " by " + MIND_SCP.colorPerc(COLOR_GOLD_STR) + ".")
  new ChannelAbilityPreset(ABIL_MIND, HONOR_SHOP_UPGRADE_LEVELS, true, tooltip)
  ..presetButtonPosNormal(2, 0)
  ..presetHotkey("E")
  ..presetIcon(Icons.bTNInvisibility)
  ..tooltipStartListen()
  ..setName("Mind")
  ..addTooltipProperty("Honor Points Cost", lvl -> "1")
  ..addTooltipProperty("Bonus Intelligence", lvl -> MIND_INT * (lvl-1))
  ..addTooltipProperty("Bonus SP (%)", lvl -> MIND_SP * (lvl-1))
  ..addTooltipProperty("Bonus SCP (%)", lvl -> MIND_SCP * (lvl-1))
  ..tooltipStopListen()
  
  tooltip = new AbilityTooltipGenerator("Increases " + "Mana".color(COLOR_GOLD_STR) + " by " + WISD_MANA.color(COLOR_GOLD_STR) + ".\n" +
    "Increases " + "Mana Regeneration (MR)".color(COLOR_GOLD_STR) + " by " + WISD_MANAREG.color(COLOR_GOLD_STR) + ".\n" +
    "Increases " + "Spell Lifesteal (SL)".color(COLOR_GOLD_STR) + " by " + WISD_SL.colorPerc(COLOR_GOLD_STR) + ".")
  new ChannelAbilityPreset(ABIL_WISDOM, HONOR_SHOP_UPGRADE_LEVELS, true, tooltip)
  ..presetButtonPosNormal(2, 1)
  ..presetHotkey("D")
  ..presetIcon(Icons.bTNBansheeMaster)
  ..tooltipStartListen()
  ..setName("Wisdom")
  ..addTooltipProperty("Honor Points Cost", lvl -> "1")
  ..addTooltipProperty("Bonus Mana", lvl -> WISD_MANA * (lvl-1))
  ..addTooltipProperty("Bonus MR", lvl -> (WISD_MANAREG * (lvl-1)).toString(1))
  ..addTooltipProperty("Bonus SL (%)", lvl -> WISD_SL * (lvl-1))
  ..tooltipStopListen()

  tooltip = new AbilityTooltipGenerator("Increases " + "Attack Crit Chance (ACC)".color(COLOR_GOLD_STR) + " by " + LUCK_ACC.colorPerc(COLOR_GOLD_STR) + ".\n" +
    "Increases " + "Spell Crit Chance (SCC)".color(COLOR_GOLD_STR) + " by " + LUCK_SCC.colorPerc(COLOR_GOLD_STR) + ".\n" +
    "Increases " + "Evasion".color(COLOR_GOLD_STR) + " by " + LUCK_EV.colorPerc(COLOR_GOLD_STR) + ".")
  new ChannelAbilityPreset(ABIL_LUCK, HONOR_SHOP_UPGRADE_LEVELS, true, tooltip)
  ..presetButtonPosNormal(3, 0)
  ..presetHotkey("R")
  ..presetIcon(Icons.bTNPriestMaster)
  ..tooltipStartListen()
  ..setName("Luck")
  ..addTooltipProperty("Honor Points Cost", lvl -> "1")
  ..addTooltipProperty("Bonus ACC (%)", lvl -> LUCK_ACC * (lvl-1))
  ..addTooltipProperty("Bonus SCC (%)", lvl -> LUCK_SCC * (lvl-1))
  ..addTooltipProperty("Bonus Evasion (%)", lvl -> LUCK_EV * (lvl-1))
  ..tooltipStopListen()
