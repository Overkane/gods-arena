package CustomStatSystem
import HashMap
import LinkedList
import UnitIndexer

// Constant unit stats
HashMap<CustomUnitStats, LinkedList<real>> array customUnitStats

HashMap<CustomUnitStats, real> array statCache

// Temporary unit stats, which are removed upon getting
HashMap<CustomUnitStats, LinkedList<real>> array customUnitOnetimeStats

public enum CustomUnitStats
  // Attack related stuff
  BONUS_ATTACK_DAMAGE
  ATTACK_POWER
  ATTACK_CRIT_POWER
  ATTACK_CRIT_CHANCE
  LIFESTEAL
  // Spell related stuff
  BONUS_SPELL_DAMAGE
  SPELL_POWER
  SPELL_CRIT_POWER 
  SPELL_CRIT_CHANCE
  SPELL_LIFESTEAL
  // Utility 
  EVASION
  MAGIC_RESISTANCE
  THREAT_GENERATION

constant isAdditive = [1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 1]

public function CustomUnitStats.isAdditive() returns boolean
  return isAdditive[this castTo int] == 1

public function CustomUnitStats.isMultiplicative() returns boolean
  return isAdditive[this castTo int] == 2

public function unit.getStat(CustomUnitStats stat) returns real
  let index = this.getIndex()
  // If cache exists for this stat, use it
  if statCache[index] != null and statCache[index].has(stat)
    return statCache[index].get(stat)

  let allStats = new LinkedList<real>

  if customUnitStats[index] != null and customUnitStats[index].has(stat)
    allStats.addAll(customUnitStats[index].get(stat))

  let hasOnetimeStat = customUnitOnetimeStats[index] != null and customUnitOnetimeStats[index].has(stat)
  if hasOnetimeStat
    allStats.addAll(customUnitOnetimeStats[index].get(stat))

    customUnitOnetimeStats[index].get(stat).clear()

  var overallStatValue = 0.

  if stat.isAdditive()
    for elem in allStats
      overallStatValue += elem
      
  else if stat.isMultiplicative()
    var multiplicativePositiveValue = 1.
    var multiplicativeNegativeValue = 1.

    for elem in allStats
      if elem > 0
        multiplicativePositiveValue *= 1 - elem
      else
        multiplicativeNegativeValue *= 1 - elem.abs()

    multiplicativePositiveValue = 1 - multiplicativePositiveValue
    multiplicativeNegativeValue = 1 - multiplicativeNegativeValue

    overallStatValue = multiplicativePositiveValue - multiplicativeNegativeValue 

  else
    print("Unknown stat " + (stat castTo int).toString())

  if not hasOnetimeStat
    // Cache newly calculated value if it didn't contain one time bonuses
    if statCache[index] == null
      statCache[index] = new HashMap<CustomUnitStats, real>()

    statCache[index].put(stat, overallStatValue)

  destroy allStats
  
  return overallStatValue

public function unit.addStat(CustomUnitStats stat, real value)
  let index = this.getIndex()

  if customUnitStats[index] == null
    customUnitStats[index] = new HashMap<CustomUnitStats, LinkedList<real>>
  
  if not customUnitStats[index].has(stat)
    customUnitStats[index].put(stat, new LinkedList<real>)
  
  // If in the list there is opposite value, then need to remove it, instead of adding its opposite value.
  // so stat list won't be overflowed with bunch of opposite values.
  if not customUnitStats[index].get(stat).remove(-value)
    customUnitStats[index].get(stat).add(value)

  // Remove cached value if it exists to trigger re-calculation
  if statCache[index] != null
    statCache[index].remove(stat)

public function unit.addOnetimeStat(CustomUnitStats stat, real value)
  let index = this.getIndex()
  if customUnitOnetimeStats[index] == null
    customUnitOnetimeStats[index] = new HashMap<CustomUnitStats, LinkedList<real>>
  
  if not customUnitOnetimeStats[index].has(stat)
    customUnitOnetimeStats[index].put(stat, new LinkedList<real>)

  // If in the list there is opposite value, then need to remove it, instead of adding its opposite value.
  // so stat list won't be overflowed with bunch of opposite values.
  if not customUnitOnetimeStats[index].get(stat).remove(-value)
    customUnitOnetimeStats[index].get(stat).add(value)

  // Remove cached value if it exists to trigger re-calculation
  if statCache[index] != null
    statCache[index].remove(stat)
  
public function unit.copyStats(unit target)
  let index = this.getIndex()
  let targetIndex = target.getIndex()
  if customUnitStats[index] != null
    customUnitStats[targetIndex] = customUnitStats[index]
  if customUnitOnetimeStats[index] != null
    customUnitOnetimeStats[targetIndex] = customUnitOnetimeStats[index]

  // Remove cached value if it exists to trigger re-calculation
  if statCache[targetIndex] != null
    destroy statCache[index]
    statCache[index] = null

public function unit.clearStats()
  let index = this.getIndex()
  if customUnitStats[index] != null
    destroy customUnitStats[index]
    customUnitStats[index] = null
  if customUnitOnetimeStats[index] != null
    destroy customUnitOnetimeStats[index]
    customUnitOnetimeStats[index] = null
  if statCache[index] != null
    destroy statCache[index]
    statCache[index] = null

init
  onUnitDeindex() ->
    getIndexingUnit().clearStats()