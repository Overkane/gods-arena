package ItemShopUI
import HashMap
import PlayerData
import Items
import ItemShopMenu
import ToggleShopButton
import ClosureEvents
import ChannelAbilityPreset
import GameConstants
import RecipeItem
import SoundUtils
import TooltipFactory
import Execute

public constant SELL_ID = compiletime(ABIL_ID_GEN.next())

constant ITEM_SOLD = new SoundDefinition(Sounds.receiveGold)
constant CANT_SOLD_ITEM = new SoundDefinition(Sounds.error) 

public ToggleShopButton toggleShopButton
public ItemShop shop

public function initItemShop()
  shop = new ItemShop()
  ..addSection("Consumables")
  ..addItem(S_HEALING_POT_ITEM)
  ..addItem(M_HEALING_POT_ITEM)
  ..addItem(B_HEALING_POT_ITEM)
  ..addItem(S_MANA_POT_ITEM)
  ..addItem(M_MANA_POT_ITEM)
  ..addItem(B_MANA_POT_ITEM)
  ..addItem(STAR_POTION_ITEM)
  ..addItem(DIVINE_POTION_ITEM)

  execute() ->
    shop
    ..addSection("Basic Items")
    ..addItem(CLAWS_OF_ATTACK_ITEM)
    ..addItem(IRON_SWORD_ITEM)
    ..addItem(IRON_AXE_ITEM)
    ..addItem(SPEAR_ITEM)
    ..addItem(GLOVES_OF_HASTE_ITEM)
    ..addItem(POWER_GLOVES_ITEM)
    ..addItem(VITALITY_STONE_ITEM)
    ..addItem(HEART_AMULET_ITEM)
    ..addItem(RING_OF_REGENERATION_ITEM)
    ..addItem(RING_OF_RECOVERY_ITEM)
    ..addItem(RING_OF_PROTECTION_ITEM)
    ..addItem(HELM_OF_PROTECTION_ITEM)
    ..addItem(IRON_SHIELD_ITEM)
    ..addItem(WOODEN_STAFF_ITEM)
    ..addItem(PENDANT_OF_MANA_ITEM)
    ..addItem(PENDANT_OF_ENERGY_ITEM)
    ..addItem(SPIRIT_MASK_ITEM)
    ..addItem(RING_OF_MANA_REGENERATION_ITEM)
    ..addItem(MASK_OF_DEATH_ITEM)
    ..addItem(TALISMA_OF_EVASION_ITEM)
    ..addItem(RUNED_BRACERS_ITEM)
    ..addItem(RUBY_ITEM)
    ..addItem(EMERALD_ITEM)
    ..addItem(SAPPHIRE_ITEM)
  
  execute() -> 
    shop  
    ..addSection("Tier 1 Recipes")
    ..addRecipe(STEEL_SWORD_RECIPE)
    ..addRecipe(SHAMAN_CLAWS_RECIPE)
    ..addRecipe(RUBY_AXE_RECIPE)
    ..addRecipe(FURY_RECIPE)
    ..addRecipe(BLOODSUCKER_RECIPE)
    ..addRecipe(SIMPLE_ARMOR_RECIPE)
    ..addRecipe(SPIKED_ARMOR_RECIPE)
    ..addRecipe(PROVOKER_RECIPE)
    ..addRecipe(BELT_OF_STRENGTH_RECIPE)
    ..addRecipe(NINJA_CLOAK_RECIPE)
    ..addRecipe(APPRENTICE_STAFF_RECIPE)
    ..addRecipe(FOLIANT_OF_WIZ_RECIPE)
    ..addRecipe(ROBE_OF_THE_MAGE_RECIPE)
    ..addRecipe(RING_OF_SPELL_LIFESTEAL_RECIPE)
    ..addRecipe(SWAPPER_RECIPE)
    ..addRecipe(ELEMENTAL_STONE_RECIPE)

  execute() ->
    shop
    ..addSection("Tier 2 Recipes")
    ..addRecipe(ARCANITE_SWORD_RECIPE)
    ..addRecipe(HEAVY_AXE_RECIPE)
    ..addRecipe(PLATED_GAUNTLETS_RECIPE)
    ..addRecipe(PALADINS_HAMMER_RECIPE)
    ..addRecipe(CORRUPTOR_RECIPE)
    ..addRecipe(LEECHER_RECIPE)
    ..addRecipe(SHAMAN_STAFF_RECIPE)
    ..addRecipe(MAGES_SWORD_RECIPE)
    ..addRecipe(NATURE_ARMOR_RECIPE)
    ..addRecipe(BLOCKADE_RECIPE)
    ..addRecipe(LIGHTNING_SHIELD_RECIPE)
    ..addRecipe(ADVANCED_ARMOR_RECIPE)
    ..addRecipe(THORNMAIL_RECIPE)
    // ..addRecipe(SPELL_NULLIFIER_RECIPE) TODO disabled for now cuz useless
    ..addRecipe(CLOAK_OF_SHADOWS_RECIPE)
    ..addRecipe(ADEPT_STAFF_RECIPE)
    ..addRecipe(MANTLE_OF_PROTECTION_RECIPE)
    ..addRecipe(STAT_BOOSTER_RECIPE)
    ..addRecipe(SPHERE_OF_THE_ELEMENTS_RECIPE)

  execute() ->
    shop
    ..addSection("Tier 3 Recipes")
    ..addRecipe(STRIKER_RECIPE)
    ..addRecipe(DRACULAS_AXE_RECIPE)
    ..addRecipe(GOLDEN_ARMOR_RECIPE)
    ..addRecipe(WIZARD_STAFF_RECIPE)
    ..addRecipe(ARCHMAGE_ROBE_RECIPE)
    ..addRecipe(ORB_OF_TIME_RECIPE)
  // ..addRecipe(MAGE_KILLER_RECIPE) TODO temporary disabled

  shop.build()

  toggleShopButton = new ToggleShopButton(shop, "Shop (B)")
  pData.forEach() (player key, PlayerData value) ->
    toggleShopButton.addHotkeyForPlayer(key, OSKEY_B)

  EventListener.onTargetCast(SELL_ID) (unit caster, unit target) ->
    let tItem = GetSpellTargetItem()..setUserData(-1) 
    
    if caster.hasItem(tItem)
      let itemCost = tItem.getRecipeItem().goldWorth

      ITEM_SOLD.playForPlayer(caster.getOwner())
      tItem.remove()
      caster.getOwner().addGold((itemCost * REFUND_VALUE).round())
    else
      CANT_SOLD_ITEM.playForPlayer(caster.getOwner())
      caster.getOwner().print("Can sell items only from inventory.")

  EventListener.add(EVENT_PLAYER_UNIT_SELECTED) -> 
    let u = EventData.getTriggerUnit()
    let p = EventData.getTriggerPlayer()

    if u.getOwner() == p and u.inventorySize() != 0
      shop.setPlayerTarget(p, u)
    

@compiletime function genAbility()
  new AbilityDefinitionMountainKingThunderBolt(SELL_ID)
  ..setDummyAbility()
  ..presetIcon(Icons.bTNPickUpItem)
  ..presetButtonPosNormal(2, 1)
  ..presetHotkey("F")
  ..setTooltipNormal(1, "Sell")
  ..setTooltipNormalExtended(1, "Select item from inventory to sell it for "+ (REFUND_VALUE * 100).percRound() +" of initial price.")
  ..presetTargetsAllowed(lvl -> TargetsAllowed.item_t)
  ..setArtEffect("")
  ..setArtCaster("")
  ..setArtTarget("")
  ..setMissileArt("")
  ..setAnimationNames("")
  ..setMissileSpeed(99999)
  ..presetDamage(lvl -> 0.)
