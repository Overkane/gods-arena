package CustomStatsUI
import CustomStatSystem
import TableLayout
import PlayerData
import HashMap
import ClosureTimers
import BonusHandler
import Icons
import TooltipFactory
import ErrorHandling
import SoundUtils
import Players
import GameConstants

constant toggleButtonSound = new SoundDefinition(Sounds.bigButtonClick)

constant pBasicStatFrames = new IterableMap<player, IterableMap<Bonus, framehandle>>
constant pCustomStatFrames = new IterableMap<player, IterableMap<CustomUnitStats, framehandle>>

public function createCustomStatsUI(player p)

  let basicStatFrames = new IterableMap<Bonus, framehandle>
  ..put(Bonus.LIFEREGEN, baseTextFrame())
  ..put(Bonus.MANAREGEN, baseTextFrame())
  ..put(Bonus.ATTACKSPEED, baseTextFrame())

  pBasicStatFrames.put(p, basicStatFrames)


  let customStatFrames = new IterableMap<CustomUnitStats, framehandle>
  ..put(CustomUnitStats.ATTACK_POWER, baseTextFrame())
  ..put(CustomUnitStats.ATTACK_CRIT_POWER, baseTextFrame())
  ..put(CustomUnitStats.ATTACK_CRIT_CHANCE, baseTextFrame())
  ..put(CustomUnitStats.LIFESTEAL, baseTextFrame())
  ..put(CustomUnitStats.SPELL_POWER, baseTextFrame())
  ..put(CustomUnitStats.SPELL_CRIT_POWER, baseTextFrame())
  ..put(CustomUnitStats.SPELL_CRIT_CHANCE, baseTextFrame())
  ..put(CustomUnitStats.SPELL_LIFESTEAL, baseTextFrame())
  ..put(CustomUnitStats.EVASION, baseTextFrame())
  ..put(CustomUnitStats.MAGIC_RESISTANCE, baseTextFrame())
  ..put(CustomUnitStats.THREAT_GENERATION, baseTextFrame())

  pCustomStatFrames.put(p, customStatFrames)


  let baseframe = createFrame("FRAME", "", GAME_UI, "", 0)
  ..setAbsPoint(FRAMEPOINT_TOP, vec2(0.362, 0.187))
  ..hide()
  ..show(p)

  new TableLayout(0.35, 0.055)
  ..row()
  ..add(baseIconFrame(Icons.bTNDeathPact, "Attack Power", "Your {0} abilities and attacks will deal bonus damage, based on the original value multiplied by this value.".format(PHYSICAL_DAMAGE_STRING)))
  ..add(customStatFrames.get(CustomUnitStats.ATTACK_POWER))
  
  ..add(baseIconFrame(Icons.bTNGolemThunderClap, "Attack Crit Power", "How much additional damage you will deal with {0} crit.".format(PHYSICAL_DAMAGE_STRING)))
  ..add(customStatFrames.get(CustomUnitStats.ATTACK_CRIT_POWER))
  
  ..add(baseIconFrame(Icons.bTNCriticalStrike, "Attack Crit Chance", "Chance to deal critical damage with {0} abilities and attacks.".format(PHYSICAL_DAMAGE_STRING)))
  ..add(customStatFrames.get(CustomUnitStats.ATTACK_CRIT_CHANCE))
  
  ..add(baseIconFrame(Icons.bTNVampiricAura, "Lifesteal", "Which portion of attack damage you will restore as health. (doesn't work on {0} spells)".format(PHYSICAL_DAMAGE_STRING)))
  ..add(customStatFrames.get(CustomUnitStats.LIFESTEAL))
  
  ..add(baseIconFrame(Icons.bTNHealthStone, "Health Regeneration", "Health regeneration per second."))
  ..add(basicStatFrames.get(Bonus.LIFEREGEN))

  ..add(baseIconFrame(Icons.bTNEvasion, "Evasion", "Chance to evade an attack."))
  ..add(customStatFrames.get(CustomUnitStats.EVASION))

  ..add(baseIconFrame(Icons.bTNGlove, "Attack Speed", "Attack speed bonus."))
  ..add(basicStatFrames.get(Bonus.ATTACKSPEED))

  ..row()
  ..add(baseIconFrame(Icons.bTNScourgeBuild, "Spell Power", "Your {0} abilities will deal bonus damage, based on the original value multiplied by this value. Affects {1} spells. Improves stats most of the summons.".format(MAGICAL_DAMAGE_STRING, HEALING_STRING)))..padTop(0.002)
  ..add(customStatFrames.get(CustomUnitStats.SPELL_POWER))..padTop(0.002)
  
  ..add(baseIconFrame(Icons.bTNWispSplode, "Spell Crit Power", "How much additional damage you will deal with {0} crit. Affects {1} spells.".format(MAGICAL_DAMAGE_STRING, HEALING_STRING)))..padTop(0.002)
  ..add(customStatFrames.get(CustomUnitStats.SPELL_CRIT_POWER))..padTop(0.002)
  
  ..add(baseIconFrame(Icons.bTNPriestMaster, "Spell Crit Chance", "Chance to deal critical damage with {0} abilities. Affects {1} spells.".format(MAGICAL_DAMAGE_STRING, HEALING_STRING)))..padTop(0.002)
  ..add(customStatFrames.get(CustomUnitStats.SPELL_CRIT_CHANCE))..padTop(0.002)
  
  ..add(baseIconFrame(Icons.bTNWellSpring, "Spell Lifesteal", "Which portion of {0} damage you will restore as health.".format(MAGICAL_DAMAGE_STRING)))..padTop(0.002)
  ..add(customStatFrames.get(CustomUnitStats.SPELL_LIFESTEAL))..padTop(0.002)

  ..add(baseIconFrame(Icons.bTNManaStone, "Mana Regeneration", "Mana regeneration per second."))..padTop(0.002)
  ..add(basicStatFrames.get(Bonus.MANAREGEN))..padTop(0.002)

  ..add(baseIconFrame(Icons.bTNGenericSpellImmunity, "Magic Resistance", "Decreases {0} damage dealt to your hero.".format(MAGICAL_DAMAGE_STRING)))..padTop(0.002)
  ..add(customStatFrames.get(CustomUnitStats.MAGIC_RESISTANCE))..padTop(0.002)

  ..add(baseIconFrame(Icons.bTNTaunt, "Threat Generation", "Increases aggro generated by your dealt damage."))..padTop(0.002)
  ..add(customStatFrames.get(CustomUnitStats.THREAT_GENERATION))..padTop(0.002)

  ..applyTo(baseframe)


  // TODO use 1 toggle button instead of 1 per each player.
  let baseFrameForButton = createFrame("FRAME", "", GAME_UI, "", 0)
  ..setAbsPoint(FRAMEPOINT_TOP, vec2(0.169, 0.18))
  ..hide()
  ..show(p)

  let toggleButton = imgBtn(Icons.bTNStatUp)
  ..setSize(0.02, 0.02)

  let tooltip = createFrame("BoxedText", toggleButton, 0, 0)
  ..setSize(0.12, 0.026)
  ..setPoint(FRAMEPOINT_LEFT, toggleButton, FRAMEPOINT_RIGHT)
  getFrame("BoxedTextTitle", 0).setText("Toggle stats UI")

  toggleButton
  ..setTooltip(tooltip)
  ..onClick() ->
    let clickedPlayer = GetTriggerPlayer()

    toggleButtonSound.playForPlayer(p)
    baseframe.toggle(clickedPlayer)
    toggleButton.unfocus(clickedPlayer)

  new TableLayout(0.02, 0.02)
  ..row()
  ..add(toggleButton)
  ..applyTo(baseFrameForButton)


public function player.clearPlayerCustomStatUI()
  if pBasicStatFrames.has(this)
    let basicFrames = pBasicStatFrames.get(this)
    for stat in basicFrames
      basicFrames.get(stat).remove()
    destroy basicFrames

    pBasicStatFrames.remove(this)

  if pCustomStatFrames.has(this)
    let customFrames = pCustomStatFrames.get(this)
    for stat in customFrames
      customFrames.get(stat).remove()
    destroy customFrames

    pCustomStatFrames.remove(this)

function framehandle.toggle(player p)
  if this.isVisible(p)
    this.hide(p)
  else
    this.show(p)

function baseIconFrame(string iconPath, string title, string description) returns framehandle
  let iconFrame = imgBtn(iconPath)
  ..setSize(0.015, 0.015)

  let tooltip = createFrame("BoxedText", iconFrame, 0, 0)

  let tooltipTitle = getFrame("BoxedTextTitle", 0)
  ..setText(title.color(COLOR_GOLD_STR))
  ..setSize(0.16, 0)
  ..setPoint(FRAMEPOINT_RIGHT, iconFrame, FRAMEPOINT_LEFT, vec2(-0.01, 0))
  
  let tooltipDescription = getFrame("BoxedTextValue", 0)
  ..setText(description)
  ..setSize(0.16, 0)
  ..setPoint(FRAMEPOINT_TOP, tooltipTitle, FRAMEPOINT_BOTTOM, vec2(0, -0.005))

  tooltip
  ..setPoint(FRAMEPOINT_TOPLEFT, tooltipTitle, FRAMEPOINT_TOPLEFT, -0.005, 0.005)
  ..setPoint(FRAMEPOINT_BOTTOMRIGHT, tooltipDescription, FRAMEPOINT_BOTTOMRIGHT, 0.005, -0.005)

  iconFrame
  ..setTooltip(tooltip)
  ..onClick() -> 
    iconFrame.unfocus()

  return iconFrame

function baseTextFrame() returns framehandle
  let textFrame = p("0")
  ..setSize(0.025, 0.015)
  ..setTextAlignment(TEXT_JUSTIFY_MIDDLE, TEXT_JUSTIFY_CENTER)

  return textFrame

public function updateCustomStatFrame(player p, CustomUnitStats stat, real value)
  pData.get(p).getHero().ifPresent() (h) ->
    if pCustomStatFrames.has(p)
      let customStatFrame = pCustomStatFrames.get(p)
      let frame = customStatFrame.get(stat)
      let statValue = (value * 100).round().toString() + stat.getMeasure() 

      frame.setText(statValue)

function updateBasicStateFrames()
  let humanPlayers = ALL_PLAYERS.filter((player p) -> p != ENEMY_PLAYER)
  
  // Since player's stats frames aren't removed on player leave, need to consider playing players, not existing frames.
  for p in humanPlayers
    pData.get(p).getHero().ifPresent() (h) ->
      if pBasicStatFrames.has(p)
        let basicStatFrame = pBasicStatFrames.get(p)
        let heroUnit = h.actor

        for basicStat in basicStatFrame
          var statValue = ""
          framehandle frame = null

          switch basicStat
            case Bonus.LIFEREGEN
              statValue = (heroUnit.getStr(true) * 0.05 + heroUnit.getBonus(Bonus.LIFEREGEN)).toString(1)
              frame = basicStatFrame.get(basicStat)
            case Bonus.MANAREGEN
              // Mana reg bonus somehow return 5 for 0.5 regen, cuz of that divide by 10.
              statValue = (heroUnit.getInt(true) * 0.05 + (heroUnit.getBonus(Bonus.MANAREGEN)) / 10).toString(1)
              frame = basicStatFrame.get(basicStat)
            case Bonus.ATTACKSPEED
              statValue = (heroUnit.getAgi(true) * 0.01 * 100 + heroUnit.getBonus(Bonus.ATTACKSPEED)).round().toString() + "%"
              frame = basicStatFrame.get(basicStat)
            default
              error("Trying to get unexpected basic stat: " + basicStat.toString() + ".")
          
          frame.setText(statValue)

init
  doPeriodically(1) (CallbackPeriodic cb) ->
    updateBasicStateFrames()
