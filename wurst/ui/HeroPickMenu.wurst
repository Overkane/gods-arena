package HeroPickMenu
import Icons
import FramehandleNames
import ClosureFrames
import HashMap
import Heroes
import PlayerData
import Hero
import GameConstants
import SoundUtils
import ItemShopUI
import DemonLordIds
import CustomStatSystem
import Backpack
import HonorShop
import LinkedList
import ObjectIdGenerator
import Reference

public HeroPickUI heroPickUI

constant BONUS_GOLD_FOR_RANDOM = 20

constant playerSelection = new IterableMap<player, HeroIcon>
constant heroPool = new LinkedList<int>
..add(HYDROMANCER_ID)
..add(TROLL_SHAMAN_ID)
..add(STORMBEARER_ID)
..add(BLADEMASTER_ID)
..add(CRUSADER_ID)
..add(ASSASSIN_ID)
..add(DEMON_LORD_ID)
..add(ARCHER_ID)
..add(CRAB_ID)
..add(ELEMENTOR_ID)
..shuffle()

constant RANDOM_ID = compiletime(HERO_ID_GEN.next())

public function initHeroPickMenu()
  heroPickUI = new HeroPickUI()
  addHeroIcons()

public function createRandomHeroes()
  heroPool.shuffle()

  pData.forEach() (player p, PlayerData value) ->
    createRandomHero(p)

function createRandomHero(player owner)
  createHero(heroPool.pop(), owner)
  owner.addGold(BONUS_GOLD_FOR_RANDOM)

function createHero(int heroId, player owner)
  // Removing hero from hero pool so it can't be get by random after.
  heroPool.remove(heroId)

  let h = new Hero(owner, heroId, HERO_PICK_RECT.randomPoint().toVec3(), angle(0))
  pData.get(owner).setHero(h)
  
  h.actor
  ..addAbility(SELL_ID)
  // Base custom stats for heroes
  ..addStat(CustomUnitStats.ATTACK_CRIT_POWER, 0.25)
  ..addStat(CustomUnitStats.SPELL_CRIT_POWER, 0.25)
  
  owner
  ..selectSingle(h.actor)
  ..setCameraPosition(h.actor.getPos())
  
  new Backpack(owner, h.actor).actor
  .addAbility(SELL_ID)
  
  new HonorShop(owner, h.actor)

  toggleShopButton.show(owner, h.actor)
  shop.showToUnit(h.actor)

function addHeroIcons()
  heroPickUI
  ..addHeroIcon(
    new HeroIcon(HYDROMANCER_ID, Icons.bTNJaina, Icons.dISBTNJaina)
    ..addTooltip("Hydromancer", "Drinks cool water. Summons elementals. Crushing."))
  ..addHeroIcon(
    new HeroIcon(TROLL_SHAMAN_ID, Icons.bTNShadowHunter, Icons.dISBTNShadowHunter)
    ..addTooltip("Troll Shaman", "Creates memes (not in game though)."))
  ..addHeroIcon(
    new HeroIcon(STORMBEARER_ID, Icons.bTNHeroMountainKing, Icons.dISBTNHeroMountainKing)
    ..addTooltip("Stormbearer", "Mighty lord of storms, good at cleaning groups of weak enemies, but lacks reliable single target damage."))
  ..addHeroIcon(
    new HeroIcon(BLADEMASTER_ID, Icons.bTNHeroBlademaster, Icons.dISBTNHeroBlademaster)
    ..addTooltip("Blademaster", "Flesh cutter. Can't go wrong with some illusions."))
  ..addHeroIcon(
    new HeroIcon(CRUSADER_ID, Icons.bTNArthas, Icons.dISBTNArthas)
    ..addTooltip("Crusader", "Holy warrior, can heal and buff allies, but also has strong buff for himself and his attacks are quite strong."))
  ..addHeroIcon(
    new HeroIcon(ASSASSIN_ID, Icons.bTNHeroWarden, Icons.dISBTNHeroWarden)
    ..addTooltip("Assassin", "Stealthy killer, good versus single targets."))
  ..addHeroIcon(
    new HeroIcon(DEMON_LORD_ID, Icons.bTNPitLord, Icons.dISBTNPitLord)
    ..addTooltip("Demon Lord", "Loves destruction. And Donuts."))
  ..addHeroIcon(
    new HeroIcon(ARCHER_ID, Icons.bTNSylvanusWindRunner, Icons.dISBTNSylvanusWindRunner)
    ..addTooltip("Archerino", "Shoots pointy sticks and is in tune with nature."))
  ..addHeroIcon(
    new HeroIcon(CRAB_ID, Icons.bTNLobstrokkBlue, Icons.dISBTNLobstrokkBlue)
    ..addTooltip("Crab", "Why do things keep evolving into crabs?"))
  ..addHeroIcon(
    new HeroIcon(ELEMENTOR_ID, Icons.bTNBLoodMage2, Icons.dISBTNBLoodMage2)
    ..addTooltip("Elementor", "Shapes the elements to his will, unleahing fearsome magic on his enemies."))
  ..addHeroIcon(
    new HeroIcon(RANDOM_ID, Icons.bTNSelectHeroOn, Icons.dISBTNSelectHeroOn)
    ..addTooltip("Random", "Get a random hero and a small gold bonus."))

class HeroPickUI
  private var heroIconCounter = 0

  private constant PADDING = 0.03
  private constant HORIZONTAL_SPACING = 0.08
  private constant VERTICAL_SPACING = -0.08
  private constant ITEM_ICON_INITIAL_POSITION = vec2(PADDING, -PADDING * 2)
  private constant MAX_ICONS_PER_ROW = 7

  private constant didntSelectHeroSound = new SoundDefinition(Sounds.error)

  private var iconPosition = ITEM_ICON_INITIAL_POSITION

  constant heroPickFrame = createFrame("FRAME", "heroPickFrame", GAME_UI, "", 0)
  private constant heroPickBackdrop = createFrame("HeroPickMenuBackdrop", heroPickFrame, 0, 0)
  private constant heroPickButton = createFrame("GeneralButton", heroPickFrame, 0, 0)

  construct()
    heroPickFrame
    ..setSize(0.6, 0.35)
    ..setAbsPoint(FRAMEPOINT_TOP, vec2(0.4, 0.52))

    createFrame(FramehandleTypeNames.text, "itemText", heroPickFrame, "", GetRandomInt(0, 1000000))
    ..setText("Choose your hero")
    ..setTextColor(colorA(255, 255, 255, 1))
    ..setPoint(FRAMEPOINT_TOPLEFT, heroPickFrame, FRAMEPOINT_TOP, vec2(0, -PADDING))
    ..setCenter()

    heroPickBackdrop.setAllPoints(heroPickFrame)

    heroPickButton
    ..setPoint(FRAMEPOINT_BOTTOM, heroPickFrame, FRAMEPOINT_BOTTOM, vec2(0, 0.02))
    ..setText("Pick Hero")
    ..onClick() ->
      let p = GetTriggerPlayer()

      if playerSelection.has(p)
        var pickedIcon = playerSelection.getAndRemove(p)

        heroPickFrame.hide(p)

        if pickedIcon.heroId == RANDOM_ID
          createRandomHero(p)
          
          let pickedIconRef = new Reference(pickedIcon)
          pData.get(p).getHero().ifPresent() (Hero h) ->
            pickedIconRef.val = HeroIcon.heroIconIdMap.get(h.actor.getTypeId())
          pickedIcon = pickedIconRef.into()
        else
          createHero(pickedIcon.heroId, p)

        pickedIcon.disable()
        playerSelection.forEach() (player key, HeroIcon value) ->
          if value == pickedIcon
            playerSelection.remove(key)
      else
        p.print("Choose hero first!")
        didntSelectHeroSound.playForPlayer(p)

  function addHeroIcon(HeroIcon heroIcon)
    heroIconCounter++
    if heroIconCounter == 1
      skip
    else if (heroIconCounter - 1) % MAX_ICONS_PER_ROW == 0
      iconPosition = iconPosition.add(-HORIZONTAL_SPACING * (MAX_ICONS_PER_ROW - 1), VERTICAL_SPACING)
    else
      iconPosition = iconPosition.add(HORIZONTAL_SPACING, 0)

    heroIcon.setIconPosition(iconPosition)

class HeroIcon
  static constant heroIconIdMap = new HashMap<int, HeroIcon>
  static private var globalIconContext = 0

  var heroId = 0
  private var iconContext = 0
  private var activeIcon = ""
  private var disabledIcon = ""

  private framehandle heroIconButton = null
  private framehandle heroIcon = null

  construct(int heroId, string activeIcon, string disabledIcon)
    heroIconIdMap.put(heroId, this)
    this.heroId = heroId
    this.activeIcon = activeIcon
    this.disabledIcon = disabledIcon
    this.iconContext = globalIconContext
    globalIconContext++

    heroIconButton = createFrame(FramehandleTypeNames.gluebutton, "PickIconButton", heroPickUI.heroPickFrame, FramehandleNames.iconButtonTemplate, iconContext)
    heroIcon = createFrame(FramehandleTypeNames.backdrop, "pickIcon", heroIconButton, "", iconContext)

    heroIconButton
    ..setSize(0.05, 0.05)
    ..onClick() ->
      let p = GetTriggerPlayer()
      playerSelection.put(p, this)

    heroIcon
    ..setAllPoints(heroIconButton)
    ..setTexture(activeIcon, 0, true)

  function addTooltip(string tooltipTitle, string tooltipDescription)
    let tooltip = createFrame("BoxedText", heroIconButton, 0, iconContext)
    heroIconButton.setTooltip(tooltip)

    tooltip..setSize(0.2, 0.08)
    ..setPoint(FRAMEPOINT_LEFT, heroIconButton, FRAMEPOINT_RIGHT)
    getFrame("BoxedTextTitle", iconContext).setText("Pick " + COLOR_GOLD_STR + tooltipTitle + "|r")
    getFrame("BoxedTextValue", iconContext)..setText("________\n\n"+tooltipDescription)

  function disable()
    heroIcon.setTexture(disabledIcon, 0, true)
    heroIconButton.disable()

  function setIconPosition(vec2 iconPosition)
    heroIconButton.setPoint(FRAMEPOINT_TOPLEFT, heroPickUI.heroPickFrame, FRAMEPOINT_TOPLEFT, iconPosition)