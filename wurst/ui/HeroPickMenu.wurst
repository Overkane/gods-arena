package HeroPickMenu
import Icons
import FramehandleNames
import HashMap
import Heroes
import PlayerData
import Hero
import GameConstants
import SoundUtils
import ItemShopUI
import DemonLordIds
import CustomStatSystem
import Backpack
import HonorShop
import LinkedList
import ObjectIdGenerator
import Reference
import CustomStatsUI
import TooltipFactory
import TableLayout
import HeroSpells
import HeroDescription

public HeroPickUI heroPickUI

constant BONUS_GOLD_FOR_RANDOM = 30

constant playerSelection = new IterableMap<player, HeroIcon>
constant heroPool = new LinkedList<int>
..add(HYDROMANCER_ID)
..add(TROLL_SHAMAN_ID)
..add(STORMBEARER_ID)
..add(BLADEMASTER_ID)
..add(CRUSADER_ID)
..add(ASSASSIN_ID)
..add(DEMON_LORD_ID)
..add(ARCHER_ID)
..add(CRAB_ID)
..add(ELEMENTOR_ID)
..add(SOULLESS_ID)
..shuffle()

public abstract class OnHeroPick
  static constant listenerList = new LinkedList<OnHeroPick>

  abstract function fire(unit hero)

  static function add(OnHeroPick listener)
    listenerList.add(listener)

  static function execute(unit hero)
    for listener in listenerList
      listener.fire(hero)

constant RANDOM_HERO_ID = compiletime(HERO_ID_GEN.next())

public function initHeroPickMenu()
  heroPickUI = new HeroPickUI()
  addHeroIcons()

public function createRandomHeroes()
  heroPool.shuffle()

  pData.forEach() (player p, PlayerData value) ->
    createRandomHero(p)

function createRandomHero(player owner)
  createHero(heroPool.pop(), owner, true)
  owner
  ..addGold(BONUS_GOLD_FOR_RANDOM)
  ..print("You have got " 
    + "{0} gold".format(BONUS_GOLD_FOR_RANDOM.toString()).color(COLOR_GOLD)
    + " for picking random hero.", 5)

function createHero(int heroId, player owner, bool isRandom)
  // Removing hero from hero pool so it can't be get by random after.
  heroPool.remove(heroId)

  let h = new Hero(owner, heroId, HERO_PICK_RECT.randomPoint().toVec3(), angle(0))
  pData.get(owner).setHero(h)
  
  createCustomStatsUI(owner)
  
  h.actor
  ..addAbility(SELL_ID)
  // Base custom stats for heroes
  ..addStat(CustomUnitStats.ATTACK_CRIT_POWER, 0.25)
  ..addStat(CustomUnitStats.SPELL_CRIT_POWER, 0.25)
  ..addStat(CustomUnitStats.ATTACK_CRIT_CHANCE, 0.05)
  ..addStat(CustomUnitStats.SPELL_CRIT_CHANCE, 0.05)
  
  owner
  ..selectSingle(h.actor)
  ..setCameraPosition(h.actor.getPos())
  
  new Backpack(owner, h.actor).actor
  .addAbility(SELL_ID)
  
  new HonorShop(owner, h.actor)

  toggleShopButton.show(owner, h.actor)
  shop.showToUnit(h.actor)

  OnHeroPick.execute(h.actor)

  print("{0} {1} {2}".format(
    owner.getNameColored(true),
    isRandom ? "randomed" : "picked",
    h.actor.getName().color(COLOR_GOLD)), 8)

function addHeroIcons()
  heroPickUI
  ..addHeroIcon(new HeroIcon(CRUSADER_ID))
  ..addHeroIcon(new HeroIcon(DEMON_LORD_ID))
  ..addHeroIcon(new HeroIcon(CRAB_ID))
  ..addHeroIcon(new HeroIcon(SOULLESS_ID))

  ..addHeroIcon(new HeroIcon(ASSASSIN_ID))
  ..addHeroIcon(new HeroIcon(ARCHER_ID))
  ..addHeroIcon(new HeroIcon(BLADEMASTER_ID))

  ..addHeroIcon(new HeroIcon(STORMBEARER_ID))
  ..addHeroIcon(new HeroIcon(HYDROMANCER_ID))
  ..addHeroIcon(new HeroIcon(TROLL_SHAMAN_ID))
  ..addHeroIcon(new HeroIcon(ELEMENTOR_ID))

  ..addHeroIcon(new HeroIcon(RANDOM_HERO_ID))

class HeroPickUI
  private var heroIconCounter = 0

  private constant PADDING = 0.027
  private constant HORIZONTAL_SPACING = 0.05
  private constant VERTICAL_SPACING = -0.05
  private constant ITEM_ICON_INITIAL_POSITION = vec2(PADDING, -PADDING)
  private constant MAX_ICONS_PER_ROW = 5

  private constant didntSelectHeroSound = new SoundDefinition(Sounds.error)

  private var iconPosition = ITEM_ICON_INITIAL_POSITION

  constant heroPickFrame = createFrame("FRAME", "heroPickFrame", getFrame("ConsoleUIBackdrop", 0), "", 0)
  private constant heroPickBackdrop = createFrame("HeroPickMenuBackdrop", heroPickFrame, 0, 0)
  private constant heroPickButton = createFrame("GeneralButton", heroPickFrame, 0, 0)

  construct()
    heroPickFrame
    ..setSize(0.3, 0.35)
    ..setAbsPoint(FRAMEPOINT_TOP, vec2(0.4, 0.52))

    createFrame(FramehandleTypeNames.text, "itemText", heroPickFrame, "", GetRandomInt(0, 1000000))
    ..setText("Choose your hero")
    ..setTextColor(colorA(255, 255, 255, 1))
    ..setPoint(FRAMEPOINT_TOPLEFT, heroPickFrame, FRAMEPOINT_TOP, vec2(0, -PADDING))
    ..setCenter()

    heroPickBackdrop.setAllPoints(heroPickFrame)

    heroPickButton
    ..setPoint(FRAMEPOINT_BOTTOM, heroPickFrame, FRAMEPOINT_BOTTOM, vec2(0, 0.02))
    ..setText("Pick Hero")
    ..onClick() ->
      let p = GetTriggerPlayer()

      if playerSelection.has(p)
        var pickedIcon = playerSelection.getAndRemove(p)

        heroPickFrame.hide(p)

        if pickedIcon.heroId == RANDOM_HERO_ID
          createRandomHero(p)
          
          let pickedIconRef = new Reference(pickedIcon)
          pData.get(p).getHero().ifPresent() (Hero h) ->
            pickedIconRef.val = HeroIcon.heroIconIdMap.get(h.actor.getTypeId())
          pickedIcon = pickedIconRef.into()
        else
          createHero(pickedIcon.heroId, p, false)

        pickedIcon.disable()
        playerSelection.forEach() (player key, HeroIcon value) ->
          if value == pickedIcon
            playerSelection.remove(key)
      else
        p.print("Choose hero first!".color(IMPORTANT_COLOR), 8)
        didntSelectHeroSound.playForPlayer(p)

  function addHeroIcon(HeroIcon heroIcon)
    heroIconCounter++
    if heroIconCounter == 1
      skip
    else if (heroIconCounter - 1) % MAX_ICONS_PER_ROW == 0
      iconPosition = iconPosition.add(-HORIZONTAL_SPACING * (MAX_ICONS_PER_ROW - 1), VERTICAL_SPACING)
    else
      iconPosition = iconPosition.add(HORIZONTAL_SPACING, 0)

    heroIcon.setIconPosition(iconPosition)

class HeroIcon
  static constant heroIconIdMap = new HashMap<int, HeroIcon>
  static private var globalIconContext = 0

  var heroId = 0
  private var iconContext = 0
  private var activeIcon = ""
  private var disabledIcon = ""

  private framehandle heroIconButton = null
  private framehandle heroIcon = null

  private HeroCard heroCard

  construct(int heroId)
    heroIconIdMap.put(heroId, this)
    this.heroId = heroId
    this.activeIcon = heroId != RANDOM_HERO_ID ? getUnitIcon(heroId) : Icons.bTNSelectHeroOn
    this.disabledIcon = activeIcon.toggleButtonString()
    this.iconContext = globalIconContext
    globalIconContext++

    heroIconButton = createFrame(FramehandleTypeNames.gluebutton, "PickIconButton", heroPickUI.heroPickFrame, FramehandleNames.iconButtonTemplate, iconContext)
    heroIcon = createFrame(FramehandleTypeNames.backdrop, "pickIcon", heroIconButton, "", iconContext)

    heroIconButton
    ..setSize(0.05, 0.05)
    ..onClick() ->
      let p = GetTriggerPlayer()
      playerSelection.put(p, this)
      heroCard.showHeroCard(p)

    heroIcon
    ..setAllPoints(heroIconButton)
    ..setTexture(activeIcon, 0, true)

    heroCard = new HeroCard(heroId)

  function addTooltip(string tooltipTitle, string tooltipDescription)
    let tooltip = createFrame("BoxedText", heroIconButton, 0, iconContext)
    heroIconButton.setTooltip(tooltip)

    tooltip..setSize(0.2, 0.08)
    ..setPoint(FRAMEPOINT_LEFT, heroIconButton, FRAMEPOINT_RIGHT)
    getFrame("BoxedTextTitle", iconContext).setText("Pick " + COLOR_GOLD_STR + tooltipTitle + "|r")
    getFrame("BoxedTextValue", iconContext)..setText("________\n\n"+tooltipDescription)

  function disable()
    heroIcon.setTexture(disabledIcon, 0, true)
    heroIconButton.disable()

  function setIconPosition(vec2 iconPosition)
    heroIconButton.setPoint(FRAMEPOINT_TOPLEFT, heroPickUI.heroPickFrame, FRAMEPOINT_TOPLEFT, iconPosition)

class HeroCard
  private static constant heroCardList = new LinkedList<HeroCard>

  private framehandle heroCardFrame = null

  construct(int heroId)
    heroCardList.add(this)

    heroCardFrame = createFrame("FRAME", "", heroPickUI.heroPickFrame, "", 0)
    ..setPoint(FRAMEPOINT_TOPLEFT, heroPickUI.heroPickFrame, FRAMEPOINT_TOPRIGHT)
    ..hide()
    
    createFrame("HeroPickMenuBackdrop", heroCardFrame, 0, 0).setAllPoints(heroCardFrame)

    defaultFrameParent = getFrame("ConsoleUIBackdrop", 0)
    let heroCardLayout = new TableLayout(0.2, 0.2)

    if heroId != RANDOM_HERO_ID
      let heroDescription = heroDescriptionMap.get(heroId)

      let heroDescriptionFrame = createFrame(FramehandleTypeNames.text, "", heroCardFrame, "", 0)
      ..setText((heroDescription.getHeroDescription()))
      ..setSize(0.16, 0)

      heroCardLayout
      ..row()
      ..add(img(getUnitIcon(heroId))..setSize(0.03, 0.03))..padRight(0.005)
      ..add(h5(heroDescription.getHeroName())..setSize(0.125, 0.03)..setTextAlignment(TEXT_JUSTIFY_MIDDLE, TEXT_JUSTIFY_LEFT))..padBot(0.005)
      ..row()
      ..add(heroDescriptionFrame)..padBot(0.005)
      ..row()..center()
      ..add(p("D")..setWidth(0.03))
      ..add(p("Q")..setWidth(0.03))
      ..add(p("W")..setWidth(0.03))
      ..add(p("E")..setWidth(0.03))
      ..add(p("R")..setWidth(0.03))
      ..row()..center()

      let selectedHeroSpells = heroSpells.get(heroId)
      for spell in selectedHeroSpells
        heroCardLayout
        ..add(baseIconFrame(getAbilityIcon(spell), GetAbilityName(spell), getAbilityExtendedTooltip(spell, 0))..setWidth(0.03))
    else
      let heroDescriptionFrame = createFrame(FramehandleTypeNames.text, "", heroCardFrame, "", 0)
      ..setText("Picking random hero gives you " + "{0} bonus gold.".color(COLOR_GOLD).format(BONUS_GOLD_FOR_RANDOM.toString()))
      ..setSize(0.16, 0)

      heroCardLayout
      ..row()
      ..add(img(Icons.bTNSelectHeroOn)..setSize(0.03, 0.03))..padRight(0.005)
      ..add(h5("Random Hero")..setHeight(0.03)..setTextAlignment(TEXT_JUSTIFY_MIDDLE, TEXT_JUSTIFY_CENTER))..padBot(0.005)
      ..row()
      ..add(heroDescriptionFrame)..padBot(0.005)
      ..row()..center()
      ..add(p("D")..setWidth(0.03))
      ..add(p("Q")..setWidth(0.03))
      ..add(p("W")..setWidth(0.03))
      ..add(p("E")..setWidth(0.03))
      ..add(p("R")..setWidth(0.03))
      ..row()..center()

      for i = 1 to 5
        heroCardLayout
        ..add(baseIconFrame(Icons.bTNSelectHeroOn))

    heroCardLayout.applyTo(heroCardFrame)

  function showHeroCard(player p)
    for card in heroCardList
      card.getHeroCard().hide(p)

    getHeroCard().show(p)

  private function getHeroCard() returns framehandle
    return heroCardFrame

function string.toggleButtonString() returns string
  var s = this

  if s.contains("BTN")
    s = s.replace("BTN", "DISBTN").replace("CommandButtons", "CommandButtonsDisabled")
  else
    s = s.replace("DISBTN", "BTN").replace("CommandButtonsDisabled", "CommandButtons")

  return s

function baseIconFrame(string iconPath, string title, string description) returns framehandle
  let iconFrame = imgBtn(iconPath)
  ..setSize(0.03, 0.03)

  let tooltip = createFrame("BoxedText", iconFrame, 0, 0)

  let tooltipTitle = getFrame("BoxedTextTitle", 0)
  ..setText(title.color(COLOR_GOLD_STR))
  ..setSize(0.295, 0)
  ..setPoint(FRAMEPOINT_RIGHT, iconFrame, FRAMEPOINT_LEFT, vec2(-0.01, 0))
  
  let tooltipDescription = getFrame("BoxedTextValue", 0)
  ..setText(description)
  ..setSize(0.295, 0)
  ..setPoint(FRAMEPOINT_TOP, tooltipTitle, FRAMEPOINT_BOTTOM, vec2(0, -0.005))

  tooltip
  ..setPoint(FRAMEPOINT_TOPLEFT, tooltipTitle, FRAMEPOINT_TOPLEFT, -0.005, 0.005)
  ..setPoint(FRAMEPOINT_BOTTOMRIGHT, tooltipDescription, FRAMEPOINT_BOTTOMRIGHT, 0.005, -0.005)

  iconFrame
  ..setTooltip(tooltip)
  ..onClick() -> 
    iconFrame.unfocus()
  
  return iconFrame

function baseIconFrame(string iconPath) returns framehandle
  let iconFrame = imgBtn(iconPath)
  ..setSize(0.03, 0.03)

  iconFrame
  ..onClick() -> 
    iconFrame.unfocus()
  
  return iconFrame