// package HealingSeal
// import Icons
// import Abilities
// import ClosureForGroups
// import AbilityTooltipGenerator
// import TheEmpyreanBuff
// import ClosureEvents
// import GameConstants
// import CustomHeal
// import TooltipFactory
// import DamageSystem

// public constant HEALING_SEAL_ID = compiletime(ABIL_ID_GEN.next())

// constant RealLevelClosure DAMAGE = lvl -> 50. + 50. * (lvl-1)
// constant RealLevelClosure BONUS_STR_DAMAGE = lvl -> 0.3 * lvl
// constant RealLevelClosure BONUS_INT_HEALING = lvl -> 0.2 * lvl
// constant RealLevelClosure RADIUS = lvl -> 350.

// init 
//   EventListener.onTargetCast(HEALING_SEAL_ID) (caster, tunit) ->
//     let lvl = caster.getAbilityLevel(HEALING_SEAL_ID)
    
//     var healSealAddAOE = 0.

//     let bEmpyreanBuff = caster.getBuff(TheEmpyreanBuff.typeId)
//     let hasEmpyreanBuff = bEmpyreanBuff != null

//     if hasEmpyreanBuff
//       let empyreanBuff = bEmpyreanBuff castTo TheEmpyreanBuff
//       healSealAddAOE = empyreanBuff.healSealAddAOE

//     let bonusStrDamage = BONUS_STR_DAMAGE.run(lvl)
//     let bonusIntHealing = BONUS_INT_HEALING.run(lvl)

//     let spellDamage = DAMAGE.run(lvl) + bonusStrDamage * caster.getStr(true)
//     let spellHealing = DAMAGE.run(lvl) + bonusIntHealing * caster.getInt(true)
//     let spellRadius = RADIUS.run(lvl) + healSealAddAOE

//     flashEffect(Abilities.holyBoltSpecialArt, tunit.getPos())

//     if tunit.isAllyOf(caster)
//       caster.healTarget(tunit, spellHealing)
//       forUnitsInRange(tunit.getPos(), spellRadius) target ->
//         if target.isEnemyOf(caster) and target.isAlive()
//           flashEffect(Abilities.holyBoltSpecialArt, target.getPos())
//           caster.dealMagicalDamage(target, spellDamage)
//     else
//       caster.dealMagicalDamage(tunit, spellDamage)
//       forUnitsInRange(tunit.getPos(), spellRadius) target ->
//         if target.isAllyOf(caster) and target.isAlive()
//           flashEffect(Abilities.holyBoltSpecialArt, target.getPos())
//           caster.healTarget(target, spellHealing)

// @compiletime function genAbility()
//   let tooltip = new AbilityTooltipGenerator("Either heals an ally and deals damage to enemies around the target or deals damage to one enemy and heals allies around the target.")
//   new ChannelAbilityPreset(HEALING_SEAL_ID, NORMAL_SPELL_LEVELS, true, tooltip)
//   ..setLevelSkipRequirement(0)
//   ..presetIcon(Icons.bTNHolyBolt)
//   ..presetButtonPosNormal(0, 2)
//   ..presetButtonPosResearch(0, 0)

//   ..tooltipStartListen()
//   ..addTooltipProperty("Damage Type", DamageTypeTooltips.magical)
//   ..presetTargetTypes(Targettype.UNIT)
//   ..presetHotkey("Q")
//   ..setName("Healing Seal")
//   ..addTooltipProperty("Damage/Heal", DAMAGE)
//   ..addTooltipProperty("Bonus Strength Damage", lvl -> (BONUS_STR_DAMAGE.run(lvl) * 100).percRound())
//   ..addTooltipProperty("Bonus Intelligence Healing", lvl -> (BONUS_INT_HEALING.run(lvl) * 100).percRound())
//   ..addTooltipProperty("Damage/Heal Radius", RADIUS)
//   ..presetManaCost(lvl -> 60 + 5 * lvl)
//   ..presetCastRange(lvl -> 450)
//   ..presetCooldown(lvl -> 8)
//   ..tooltipStopListen()